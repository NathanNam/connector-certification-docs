
[[_functional_tests_automation]]
== Functional Tests Automation

This section explains how to automate functional test cases on Connectors.

=== Approach Explanation

==== Objectives

. Automation test suite integrated to the connector.
. Real sandbox and Mule server used when running the tests.
. Automation test suite maintenance is minimal.
. Outdated automation suite doesn't affect development.

==== Test Creation Criteria

. Launch and shut a Mule instance for each test to ensure isolation from the rest of a suite.
. Use the `setUp()` method to create a test fixture prior to running an actual test.
. Create entities to test each operation.
. Use beans in a Spring file to separate tests from input test data values.
. Make tests flexible enough to support all possible entities and the amount of them (if applicable).
. Only update tests when business logic changes in an operation, or when you modify the operation itself, such as when a signature changes.
. Provide one Mule flow for each operation. Use Java code to glue operations into more complex use cases.
. Clean up tests after each completes, and leave the sandbox in the state prior to running a test.
. Tests should clean up after themselves. Sandbox should be left in the state prior to running the test.
. Test only one thing at a time.

==== Coverage Categories

. *Use a smoke suite* to ensure test preconditions are met for a Regression run.
. *Use a regression suite* to include at least one test case for each operation. Take input on this kind of test from a Mule Message, ensure a test is fully parameterized, and only modify data from the AutomationSpringBeans.xml file.


include::sections/1-mule-connector-test-framework.asc[]

include::sections/2-framework-testsuite-components.asc[]

include::sections/3-test-methods.asc[]

include::sections/4-test-cases-clasification.asc[]

include::sections/5-test-datasense.asc[]

include::sections/6-test-connections.asc[]

include::sections/7-transformers-and-inbound-endpoints.asc[]
