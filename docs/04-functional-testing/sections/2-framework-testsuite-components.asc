[[_framework_and_test_suite_components]]
=== Framework and Test Suite Components

==== ConnectorTestCase Class
ConnectorTestCase class inherits from *org.mule.tck.junit4.FunctionalTestCase* and wraps FunctionalTestCase methods into methods that both facilitate automating connectors operations use cases and enforce a uniform approach on the construction of test suites. ConnectorTestCase is by *<Connector>TestParent.java* and this class is the parent test class for all of the test cases.

==== ConnectorTestUtils Class
Provides methods for working with _NullPayload_, initializing random test data and also manipulating the date in the Spring file. Also enhances the exception message that displays for more accurate debugging.

==== <Connector>TestParent Class
Extends the ConnectorTestCase class. You can use this class to override default framework configuration settings, add OAuth capabilities, implement helper methods, and store global settings, such as testing run time out rules.

You can define common use cases for the service as class methods to make them available to the rest of the test suite. This makes tests more readable and associates a test with a connector's domain.

All TestCases classes must extend from this TestParent.

==== <OperationName>TestCases Class
*Note:* Do not allow automation tests to be automatically run by Maven because the tests require credentials. Follow the naming conventions for an automation test.

Each operation in the connector has an *<OperationName>TestCases.java* class that contains its related test cases. The sequence of operations called along the *@Before-@Test-@After* cycle make an operation use case.

[source,java]
----
public class <OperationName>TestCases extends <ConnectorName>TestParent {

   // private attributes used as auxiliary fields for storing test run values
   private Integer leadRecordId;

   // creates the test fixture
   @Before
   public void setUp() throws Exception {
     ...
   }

   // returns the sandbox to its original state
   @After
   public void tearDown() throws Exception {
      ...
   }

   // method that invokes the flow of the operation under test and asserts on its payload
   @Category({SmokeTests.class, RegressionTests.class})
   @Test
   public void test<operationName>() {
      try {
         ...
      } catch (Exception e) {
         fail(ConnectorTestUtils.getStackTrace(e));
      }
   }
}
----

==== Test Resources
. *AutomationSpringBeans.xml* contains the maps and POJOs required by the tests to run.
. *automation-test-flows.xml* is a collection of flows, each containing a connector operation, that invoke on the tests.
. *automation-credentials.properties* stores the connector credentials and authenticated user related information.

==== Test Runners
Run different sets of tests with the aid of runners. Test cases are classified into two categories:

. *Smoke*: Tests that verify operations used on @Before and @After methods, thus assuring that it makes sense to run a test suite.
. *Regression*: Positive test on the operation attributes that you pass from a Message.

=== Suite Implementation

==== Test Development Environment Set Up
After building a connector, add *target/generated-sources/mule* to the project build path. You may need to add other generated sources to the build path depending on the connector (such as target/generated-sources/cxf).

If a connector is *Standard*, add a *muleLicenseKey.lic* to the *src/test/resources* folder and remove it prior to committing your changes.

==== Packages and Files
. *org.mule.modules.<connector-project>.automation* contains the *<Connector>TestParent* and the _SmokeTests_ and _RegressionTests_ categories interfaces.
. *org.mule.modules.<connector-project>.automation.testrunners* contains the runners (RegressionTestSuite, SmokeTestSuite).
. *org.mule.modules.<connector-project>.automation.testcases* contains the functional test cases exclusively.
. *<connector-project>/src/test/resources* contains automation flows, credentials and Spring beans files:
.. *AutomationSpringBeans.xml*
.. *automation-test-flows.xml*
.. *automation-credentials.properties*

==== Automation Flows

For each operation, place a maximum of two flows in the *automation-test-flows* file. One flow is for mandatory attributes. This ensures that you implement all mandatory arguments in a connector and if applicable, use another flow with all attributes (mandatory and optional), to build a more general case for the operation.

==== automation-test-flows.xml and Operation Attributes

Each operation in the connector has at least a corresponding flow in the automation-test-flows file. The flow and its associated operation should be thought of as resources that can be called from multiple tests. Flow names are the same as the operation they contain or at least start with the name of the operation they contain, for example:

[source,xml]
----
<flow name="<operation-name>" doc:name="<operation-name>">
  <marketo:<operation-name>
    config-ref="<ConfigName>"
    doc:name="<operation-name>"  … />
</flow>

<flow name="<operation-name>-<particular-case>" doc:name="<operation-name>">
  <marketo:<operation-name>
    particularCaseAttribute="#[flowVars.attributeName]"
    config-ref="<ConfigName>"
    doc:name="<operation-name>"  … />
</flow>
----

Populate operation attributes as:

[source,xml]
attributeName="#[flowVars.attributeName]"

Or as:

[source,xml]
<taleo:<entityName> ref="#[flowVars.<entityName>Ref]"/>

In the case of being given the choice of passing non-primitive types (e.g. POJOs, List<POJOs>, Map<POJOs>, etc.) either from the payload, by reference, or by manually creating it using Anypoint Studio, either taking the value from the payload or by reference should be selected.

[source,xml]
----
<!-- mobjects value passed by as reference -->
<flow name="sync-mobjects" doc:name="sync-mobjects">
  <marketo:sync-mobjects config-ref="Marketo"
     doc:name="Sync MObjects"
     operation="#[flowVars.operation]"
     type="#[flowVars.type]">
    <marketo:mobjects ref="#[flowVars.mobjectsRef]"/>
  </marketo:sync-mobjects>
</flow>
----

Or

[source,xml]
----
<!-- mobject value taken from payload -->
<flow name="sync-mobjects" doc:name="sync-mobjects">
  <marketo:sync-mobjects config-ref="Marketo"
     doc:name="Sync MObjects"
     operation="#[flowVars.operation]"
     type="#[flowVars.type]"/>
</flow>
----

==== Keeping Headers Updated
Change the connector version to current to avoid breaking the configuration XML file, for example,

from: `http://www.mulesoft.org/schema/mule/taleo/1.0-SNAPSHOT/mule-taleo.xsd`

To: `http://www.mulesoft.org/schema/mule/taleo/current/mule-taleo.xsd`

==== Credentials
* Choose connector credentials from the automation-credential.properties file during test development, or if tests are to be run from within Eclipse.
* Populate the config element field with placeholders using:
`configRefAttribute="${serviceName.configRefAttribute}"`

[source,xml]
----
<marketo:config name="Marketo"
  userId="${marketo.userId}"
  key="${marketo.key}"
  endpointUrl="${marketo.endpointUrl}"
  doc:name="Marketo">
  <marketo:connection-pooling-profile initialisationPolicy="INITIALISE_ONE"
     exhaustedAction="WHEN_EXHAUSTED_GROW"/>
</marketo:config>
----

* Create a Property placeholder that references automation-credentials.properties or add the following as an attribute to the Mule node:

`xmlns:context="http://www.springframework.org/schema/context"`

Or add this as one of its child nodes:

`<context:property-placeholder location="automation-credentials.properties" />`

* Prior to committing, change the location value to:

`<context:property-placeholder location="${<CONNECTOR_NAME>_CREDENTIALS}" />`

This lets you run the suites from the console or build plan by passing the URL where the automation-credentials.properties are stored.

==== Test Data Using Spring Beans
AutomationSpringBeans stores the test data required for each test to run.

The most common case is to have a <testMethod>TestData map containing all the primitive values or bean references for a specific test. For more complex cases, additional beans for the test may be required besides the main TestData map.

The approach is that each test has its set of dedicated test values, hence the convention. Reusing the same bean on different test results in them being coupled; if some specific data setup is desired for a particular test, changes might end up producing an unexpected behavior on others.

By convention all bean IDs related to an operation should begin with the operation name followed by the bean class. This avoids naming conflicts and makes clear which operation this bean uses.

CAUTION:From 2.0.7 version the beanId of the main TestData map has to end with "TestData"

[source,xml]
----
<!--  get-lead -->
<bean id="testGetLeadLeadKey" class="com.marketo.mktows.LeadKey">
   <property name="keyType">
      <util:constant static-field="com.marketo.mktows.LeadKeyRef.IDNUM" />
   </property>
</bean>

<util:map id="testGetLeadLeadRecord" scope="prototype">
   <entry key="City" value="city" />
   <entry key="Company" value="company_title" />
   <entry key="Country" value="country" />
   <entry key="FirstName" value="first_name" />
   <entry key="LastName" value="last_name" />
   <entry key="MobilePhone" value="cell_phone" />
   <entry key="Phone" value="work_phone" />
   <entry key="State" value="state" />
   <entry key="Title" value="job_title" />
</util:map>

<!--  testGetLead method TestData map -->
<util:map id="testGetLeadTestData" scope="prototype">
   <entry key="type" value="LeadRecord" />
</util:map>
----

. In spring use scope="prototype" (if applicable) to ensure values from previous tests (ids, etc) are not reused in the following tests.
. "TestData" map can be used to store expected results for a test in case the expected value relates to the data been passed to them.

[source,xml]
----
<util:map id="createBatchAttendeeListTestData"
      map-class="java.util.HashMap"
      key-type="java.lang.String" value-type="java.lang.Object"
      scope="prototype">
        <entry key="payloadContent" value-ref="attendeeBatch"/>
        <entry key="batchType" value="CREATE"/>
        <entry key="expectedRecordsSucceeded" value="2"/>
</util:map>
----

Then

[source,java]
----
@Test
public void testCreateBatchAttendeeList() {
       ...
 assertEquals(payload.getRecordsSucceeded(),
   getTestRunMessageValue("expectedRecordsSucceeded"));

}
----

==== Relevant Cases Derived From Data
. Attribute types or entity members that are non-primitive values (for example, an entity having a Date field or complex types).
. Wildcards or special characters on queries.
. Output entities, such as a list that contains different types of records.
. If a client operation has not merely been wrapped, exercise connector custom code through a more complex test data setup for the test. An example of this are methods that receive a data representation object and return a concrete instance.
Hint: Check the developer’s unit tests.

`ConcreteInstance fromMap(Map<String,Object> mapRepresentation)`

==== Fields with Unique Values
Dynamically generate entity fields that contain unique values to make the automation runs more robust. For example:

[source,xml]
----
<bean id="randomEmailAddress"
  class="org.mule.modules.tests.ConnectorTestUtils"
  factory-method="generateRandomEmailAddress" scope="prototype" />
----

==== Date Generation Common Cases

[source,xml]
----
<bean id="xmlGregorianCalendarDateInThePast"
  class="org.mule.modules.tests.ConnectorTestUtils"
  factory-method="generateXMLGregorianCalendarDateForYesterday"
  scope="prototype" />
----

==== User Related Data
Use the automation-credentials.properties files in conjunction with AutomationSpringBeans.xml to test user related operations.

===== automation-credentials.properties
```
taleo.username=username
taleo.password=password
taleo.companyCode=companyCode
taleo.userId=42
```

===== AutomationSpringBeans

[source,xml]
----
<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
  <property name="location">
    <value>automation-credentials.properties</value>
  </property>
</bean>

<!-- search-user  -->
<util:map id="testSearchUserTestData" map-class="java.util.HashMap"
  key-type="java.lang.String" value-type="java.lang.Object" scope="prototype">
  <entry key="expectedUserId" value="${taleo.userId}" />
  <entry key="searchParams" value-ref="searchUserSearchParams" />
</util:map>
----
