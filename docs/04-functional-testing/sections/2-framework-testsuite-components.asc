[[_framework_and_test_suite_components]]
==== CTF Components

All functional test cases classes must extend from a AbstractTestCase<T>, which is parametrized with the connector type under tests.

*AbstractTestCase<T>.java* is found within _org.mule.tools.devkit.ctf.junit_ and implements all the initialization and shut down of the CTF by means of @BeforeClass and @AfterClass methods. *Extending from this class is mandatory*, since it assures the correct use of the CTF.

Every test case needs to be named as <OperationName>TestCases. These naming conventions avoid Maven to automatically run test cases, since tests require credentials and therefore automatically running them without the proper set of credentials will produce tests to fail.

===== _<OperationName>TestCases_ Class

Each connector operation, which has its own processor, has an *<OperationName>TestCases.java* class that contains its related test cases.

[source,java]
----

import org.mule.tools.devkit.ctf.junit.AbstractTestCase;

public class <OperationName>TestCases extends AbstractTestCase<<ConnectorClassName>> {

   // private attributes used as auxiliary fields for storing test run values
   private Integer leadRecordId;

   // Use to create required data for the test.
   @Before
   public void setUp() throws Exception {
     ...
   }

   //returns the sandbox to its original state
   @After
   public void tearDown() throws Exception {
      ...
   }

   //Method that invokes the connector operation under test and asserts on the return value.
   @Test
   public void <unitOfWork><StateUnderTest><ExpectedBehavior>() {
      try {
         ...
      } catch (Exception e) {
        //Manage exception accordingly
      }
   }
}
----

IMPORTANT: Unit test naming convention is not mandatory, although <unitOfWork><StateUnderTest><ExpectedBehavior> is a good practice. An example test might be as follows: parseOnEmptyStringExceptionThrown.

The exception might be managed within the test case if the required information is available or it might be thrown.

===== _AbstractTestCases_ Class

In case a sub-parent is needed, it must be named as AbstractTestCases, which will extend from CTF AbstractTestCase and add the required behaviour, such as @Before and @After methods.

[source,java]
----
>
package org.mule.modules.<ConnectorName>.automation.functional;

class AbtractTestCases extends org.mule.tools.devkit.ctf.junit.AbstractTestCase<<ConnectorClassName>> {

   public AbstractTestCases(){
     //This is required if running single tests as well as a test suite
     setConnectorClass(<ConnectorName>TestCases.class);
   }

   @Before
   public void setUp() throws Exception {
     ...
   }


   @After
   public void tearDown() throws Exception {
      ...
   }
}
----

===== CTF _Connector_ and _Dispatcher_

The AbstractTestCase class provides getters for the following objects:

1. *Connector:* This CTF component enables testing on every connnector processor, mocking the real connector under tests. Thus, all the underlying Mule logic is kept within CTF and not exposed to the test developer.
2. *Dispatcher:* This second CTF component enables testing on particular aspects of a connector, such as _Pagination_, _WSDL Operations_ and _MetaData_.

Both objects are properly documented within CTF documentation http://mulesoft.github.io/connector-testing-framework/[here].
