[[0_intro]]
=== Introduction

Functional tests aim at assuring the correct behaviour of the connector within a particular Mule runtime environment, particular testing how well it integrates with Mule components.

Functional testing is a mandatory step within the certification process and need to be carried out following strict practices, who are detailed throughout this section.


==== Connector Testing Framework

The main objective is to test the connector with different Mule runtime environments through the Connector Testing Framework, allowing to detect possible conflicts, such as class loading issues.

Documentation of the Connector Testing Framework is available https://github.com/mulesoft/connector-testing-framework[here]. This framework eases the creation of connector functional tests, where the developer is not necessarily involved with Mule's internals, such as flows, configurations and Spring beans. The objective of this framework is twofold. On the one hand, we decouple how Mule works and how functional tests are written. On the other hand, we enable a runtime platform to run connector tests with multiple Mule versions by executing the tests in remote Mule instances, achieving a decoupled runtime environment.

==== Test Organization

Functional tests need to be engineered and organized as follows:

. Unit and Functional tests are ran separately. Unit tests are always run when executing _mvn clean install_, while functional tests are explicitly executed by means of a Test Suite, called _FunctionalTestSuite_.
. FunctionalTestSuite groups all functional tests with no exception, where every test is marked with the _FunctionalTest.class_ category, available within the Connector Testing Framework.

==== Naming Convention

. Unit tests should follow JUnit naming conventions, normally ending with _Test_.
. Functional tests must end with _TestCases_


==== Test data

Test data must be contained within a _TestDataBuilder.java_ class. This test data builder must generate all necessary test data for every single functional test. Developers are free to use whatever data input techniques within this class. 
