[[_intro]]
==== Introduction

Functional tests aim at assuring the correct behaviour of the connector within a particular Mule runtime environment, particular testing how well the connector integrates with Mule components.

Functional testing is a _mandatory_ step within the certification process and need to be carried out following strict practices, who are detailed throughout this section.

===== Connector Testing Framework

The main objective is to test the connector with different Mule runtime environments through the Connector Testing Framework, allowing to detect possible conflicts, such as class loading issues. The default functional testing framework is called CTF (_Connector Testing Framework_).

Documentation of the Connector Testing Framework is available https://github.com/mulesoft/connector-testing-framework[here]. This framework eases the creation of connector functional tests, where the developer is not necessarily involved with Mule's internals, such as flows, configurations and Spring beans. The objective of this framework is twofold. On the one hand, we decouple how Mule works and how functional tests are written. On the other hand, we enable a runtime platform to run connector tests with multiple Mule versions by executing the tests in remote Mule instances, achieving a decoupled runtime environment.

Any other approach for carrying out functional tests is highly discouraged. However, certain aspects of functional testing is not cover within CTF and thus custom approaches might be used. The following sections described which aspects can and can not be tested with the CTF.

===== Test Organization

Functional tests need to be engineered and organized as follows:

. _FunctionalTestSuite_ groups all functional tests with no exception, where every test is marked with the _FunctionalTest.class_ category, available within Connector Testing Framework packages. In case two or more test suites are required (when grouping semantic similar tests), a _FullFunctionalTestSuite_ need to be used, grouping the remaining test suites.

===== Naming Convention

. Functional tests must end with _TestCases_. Employing alternatives ending names is discouraged, specially endings such as _Test_ or _TestCase_.

===== Test data

Test data must be contained within a _TestDataBuilder.java_ class. This test data builder must generate all necessary test data for every single functional test. Developers are free to use whatever data input techniques within this builder (JSON, Beans, etc.).

It is advisable to avoid binding test data with test cases and keep all test data generation within the test data builder.
