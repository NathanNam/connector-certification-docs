[[_intro]]

==== Tests Organization

Functional tests need to be engineered and organized as follows:

. *Test Suites:* _FunctionalTestSuite_ groups all functional tests with no exception. In case two or more test suites are required (when grouping semantic similar tests for instance), a _FullFunctionalTestSuite_ need to be used, grouping the remaining test suites.
. *Naming Convention:* Functional tests must end with _TestCases_. Employing alternatives ending names is discouraged, specially endings such as _Test_ or _TestCase_.
. *Test Categories:* Tests categories might be used if needed, although are discouraged. However, if used, they need to be named as _FunctionalTest.class_.


==== Packages and Files

Test files need to be kept in specific packages as follows:

. *org.mule.modules.<connector-project>.automation.testrunners* contains the test runner (FunctionalTestSuite).
. *org.mule.modules.<connector-project>.automation.testcases* contains the functional test cases exclusively.

==== Test Data

Test data must be contained within a _TestDataBuilder.java_ class. This test data builder must generate all necessary test data for every single functional test. Developers are free to use whatever data input techniques within this data builder (JSON, Beans, etc.).

It is advisable to avoid binding test data with test cases and keep all test data generation within the test data builder.

==== Connector Testing Framework

The main objective is to test the connector with different Mule runtime environments through the Connector Testing Framework, allowing to detect possible conflicts, such as class loading issues. The default functional testing framework is called CTF (_Connector Testing Framework_).

Documentation of the Connector Testing Framework is available http://mulesoft.github.io/connector-testing-framework/[here]. This framework eases the creation of connector functional tests, where the developer is not necessarily involved with Mule's internals, such as flows, configurations and Spring beans. The objective of this framework is twofold. On the one hand, we decouple how Mule works and how functional tests are written. On the other hand, we enable a runtime platform to run connector tests with multiple Mule versions by executing the tests in remote Mule instances, achieving a decoupled runtime environment.

Any other approach for carrying out functional tests is highly discouraged. However, certain aspects of functional testing is not cover within CTF and thus custom approaches might be used. The following sections described which aspects can and can not be tested with CTF.
