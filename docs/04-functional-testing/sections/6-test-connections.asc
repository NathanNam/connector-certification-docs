=== Test Connection
Test connection test cases are derived from the error handling logic on each of the connector strategy classes. Check the following example:

- SalesforceBasicAuthStrategy.java class from the Salesforce Connector throws MalformedURLException and ConnectionExceptionCode (this exception can be break into many negative cases, like invalid credentials, expired credentials, etc)
- Validations are applied to the API version through verifyApiVersion method

The resulting cases should be taking into consideration and their corresponding test cases should be created.

Assertions on the error messages should be applied to ensure that on error user is effectively informed of the cause of the problem.

To add Test Connection test cases to your Functional Test Suite follow this steps:

. Add the necessary config elements to support test configuration negative cases to the automation-test-flows.xml file. Config elements name convention is as follows: Test_Connection_Negative_<Particular_Case>. See an example below.
+
[source,xml]
----
<mongo:config name="Mongo_DB" username="${mongo.username}"
    password="${mongo.password}" host="${mongo.host}" port="${mongo.port}"
    database="${mongo.database}" doc:name="Mongo DB" connectionsPerHost="4"
    maxWaitTime="5000">
    <mongo:connection-pooling-profile
        maxActive="2" initialisationPolicy="INITIALISE_ONE" exhaustedAction="WHEN_EXHAUSTED_WAIT"
        maxWait="5000" />
</mongo:config>

<mongo:config name="Test_Connection_Negative_Invalid_Username" username="INVALID_USERNAME"
    password="${mongo.password}" host="${mongo.host}" port="${mongo.port}"
    database="${mongo.database}" doc:name="Mongo DB" connectionsPerHost="4"
    maxWaitTime="5000">
    <mongo:connection-pooling-profile
        maxActive="2" initialisationPolicy="INITIALISE_ONE" exhaustedAction="WHEN_EXHAUSTED_WAIT"
        maxWait="5000" />
</mongo:config>

 ...
----
+
. Create the ConnectTestCases class
. Add a positive and any necessary negative tests
+
[source,java]
----
import org.mule.common.Result;
import org.mule.common.TestResult;
import org.mule.common.Testable;

@Test
public void testConnectInvalidUsername() throws Exception {
    TestResult testResult ==  getGlobalElementTestable("Test_Connection_Negative_Invalid_Username").test();
    assertEquals(Result.Status.FAILURE, testResult.getStatus());
    assertEquals("INVALID_CREDENTIALS", testResult.getFailureType().getName());
    assertEquals("Couldn't connect with the given credentials", testResult.getMessage());
}

@Test
public void testConnectSuccess() throws Exception {
    TestResult testResult ==  ((Testable) getGlobalElementTestable("Mongo_DB")).test();
    assertEquals(Result.Status.SUCCESS, testResult.getStatus());
}
----
