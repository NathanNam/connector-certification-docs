[[_test_methods]]
=== Test Methods

==== Good Test Case Qualities
. Flexibility: All data setup changes (for example, entity type changes) can be performed from the Spring file without modifying the tests.
. Only runtime generated values should be handled in a test, everything else should be declared in the AutomationSpringBeans file.
+
[source,java]
----
DeleteRecord deleteUserRecordRequest == new DeleteRecord();
deleteUserRecordRequest.setSysId(userSysId);
upsertPayloadContentOnTestRunMessage(deleteUserRecordRequest);
runFlowAndGetPayload("delete-user-record");
----
+
. Extensibility: Test cases can be used for any amount of entities and also apply validations to any kind of output.
. @Test should not start with any kind of preparation prior to calling the operation under test. That should fall under the @Before method. Ideally a test should call the flow of the operation under test, assert the result, and, if applicable, set data required for the @After method.
. Assertions are applied to values on the responses, avoid using the assertNotNull assertion.
.. In case a message processor returns an object that can contains null field values, it is acceptable to perform an assertNotNull on the field followed by the functional assertion on the field. This avoids failures being logged as errors.
.. If a message processor has void as its return type and the payload was not used to pass data to it you can use this assertion:
+
[source,java]
----
org.mule.modules.tests.ConnectorTestUtils.assertNullPayload(Object)

GetResponse getResponse == runFlowAndGetPayload("get-user");
assertEquals(userSysId, getResponse.getSysId());
assertEquals(expectedName, getResponse.getName());
----
+
. If void is returned by the operation under test, auxiliary calls to other operations can be made to verify that changes took effect.
. As last resort, sets of void operations can be grouped by a test case that validates that no exception is returned by their usage.

==== Test Fixture and tearDown
Request test data and perform use case preparation logic on the @Before methods. A @Test method should contain if possible, only a single flow call (the one that relates to the operation under test) and the assertions on its payload. On the @After method, revert the changes to the sandbox.
The frameworks enforces:

. Data consumed by the operation under test must be taken from the TestRunMessage. This implies that the TestRunMessage is initialized at some point prior to the invocation of the flow containing the operation.
. Additional flows can be invoked without altering the TestRunMessage by using:
.. runFlowAndGetMessage(String flowName, String beanId)
.. runFlowAndGetPayload(String flowName, String beanId)
. Runtime values can be added to the TestRunMessage to prepare the data for the operation under test.
+
[source,java]
----
 @Before
   public void setUp() throws Exception {
      HashMap<String, Object>
        leadRecord == getBeanFromContext("listOperationMObject");
      initializeTestRunMessage(leadRecord);
      // allows updating leadRecord with values from operation responses
      ...
   }
----
+
. "Operation under test" test data needs to be composed from setUp responses.

==== Errors and Failures
Fixture and tearDown throw Exception so that unexpected errors on their logic or calls are listed as an errors on the test and not as a failure.

[source,java]
----
   @Before
   public void setUp() throws Exception {
      // setUp logic
   }

   @Test
   public void setUp() throws Exception {
      // setUp logic
   }
----

If an exception is thrown on the @Test, the test is listed as failed.

[source,java]
----
   @Category({SmokeTests.class, RegressionTests.class})
   @Test
   public void test<operationName>() {
      try {
         ...
      } catch (Exception e) {
         fail(ConnectorTestUtils.getStackTrace(e));
      }
   }
----
