=== DataSense (Dynamic metadata)

First of all create the DataSenseTestCases class on the connector functional test suite package

==== @MetaDataKeyRetriever method

. Add a testGetMetaDataKeys() method
. In the AutomationSpringBeans create a map bean containing the data for the getMetadata() test methods method.
.* It should contain the number of keys associated with the sandbox (expectedMetaDataKeysCount)
.* A list of maps whose fields follow the MetaDataKey format and represent MetaDataKeys for entities identified as critical.
+
[source,xml]
----
<util:map id="getMetaDataKeysTestData" map-class="java.util.HashMap" key-type="java.lang.String"
          value-type="java.lang.Object" scope="prototype">
    <entry key="expectedMetaDataKeysCount" value="10"/>
    <entry key="expectedMetaDataKeys">
        <list value-type="java.util.HashMap">
          <map key-type="java.lang.String" value-type="java.lang.Object">
              <entry key="displayName" value="CI_POSITION_DATA#Find"/>
              <entry key="id" value="CI_POSITION_DATA#Find"/>
              <entry key="category" value="InvokeCategory"/>
          </map>
          <map key-type="java.lang.String" value-type="java.lang.Object">
              <entry key="displayName" value="CI_POSITION_DATA#Create"/>
              <entry key="id" value="CI_PERSONAL_DATA#Create"/>
              <entry key="category" value="InvokeCategory"/>
          </map>
       </list>
    </entry>
</util:map>
----
+
. To the DataSenseTestCases class add the following test cases
+
[source,java]
----
@Before
public void setUp() throws Exception {
    initializeTestRunMessage("getMetaDataKeysTestData");
}

@Test
@Category({RegressionTests.class, SmokeTests.class})
public void testGetMetaDataKeysSuccess() {
  assertGetMetaDataKeysSuccess("PeopleSoft");
}

@Test
@Category({RegressionTests.class, SmokeTests.class})
public void testGetMetaDataKeysAmount() {
  List<MetaDataKey> retrievedMetadataKeys == getMetaDataKeyList("PeopleSoft");
    assertEquals(retrievedMetadataKeys.size(), Integer.parseInt((String) getTestRunMessageValue("expectedMetaDataKeysCount")));
}

@Test
@Category({RegressionTests.class, SmokeTests.class})
public void testGetMetaDataKeysContainsKeys() {
    assertMetaDataKeysContainsKeys("PeopleSoft", (List<HashMap<String, String>>) getTestRunMessageValue("expectedMetaDataKeys"));
}
----
+
If additional testing wants to be performed mule-connector-case provides a set of methods for MetaData testing.

* assertGetMetaDataKeysSuccess
* getMetaDataKeyList
* assertMetaDataKeysContainsKeys


==== @MetaDataRetriever method

===== Test getMetaData entity retrieval for all MetaDataKeys

. Add a Timeout rule on the DataSenseTestCases class to avoid the testGetMetaData from not completing its execution
. Add a testGetMetadata() method to the DataSenseTestCases class
+
[source,java]
----
@Rule
public Timeout globalTimeout == new Timeout(360000);

@Test
public void testGetMetaData() {
  List<MetaDataKey> metaDataKeys == getMetaDataKeyList("Salesforce");
  Iterator<MetaDataKey> iterator == metaDataKeys.iterator();

  while (iterator.hasNext()) {
    MetaDataKey metaDataKey == iterator.next();
    Result<MetaData> metaData == connector.getMetaData(metaDataKey);
    assertTrue(Result.Status.SUCCESS.equals(metaData.getStatus()));
  }

}
----

===== Test getMetaData method logic for a given entity

Add a GetMetaDataTestCases test class for all test related to input and output MetaData for target processors and entities.

To check the MetaData model implemented on the connector select an entity that exercises it.

First you'll need to define the method/entity under test and add it to your automation-test-flows.xml file

[source,xml]
----
<flow name="get-metadata-find" >
    <peoplesoft:invoke-operation type="CI_POSITION_DATA#Find" config-ref="PeopleSoft" doc:name="PeopleSoft">
        <peoplesoft:params/>
    </peoplesoft:invoke-operation>
</flow>
----

Using getOutputMetaDataPayload retrieve the MetaDataModel and cast it in order to check how the entities are described

[source,java]
----
    @Test
    @Category({RegressionTests.class, SmokeTests.class})
    public void testGetMetaDataCI_POSITION_DATAType() {
        try {
            MetaDataModel payload == getOutputMetaDataPayload("get-metadata-find");
            DefinedMapMetaDataModel definedMapMetaDataModel == (DefinedMapMetaDataModel) ((ListMetaDataModel) payload).getElementModel();
            List<MetaDataField> fields == definedMapMetaDataModel.getFields();
            assertEquals(7, fields.size());
        } catch (Exception e) {
            fail(ConnectorTestUtils.getStackTrace(e));
        }
    }

----

==== Grouping Types

For the testGetMetaDataKeysContainsKeys() test select entities that would have different category fields values because of their @MetaDataCategory class origin.

[source,xml]
----
<list value-type="java.util.HashMap">
  <map key-type="java.lang.String" value-type="java.lang.Object">
      <entry key="displayName" value="Account"/>
      <entry key="id" value="AccountId"/>
      <entry key="category" value="CategoryA"/>
  </map>
  <map key-type="java.lang.String" value-type="java.lang.Object">
      <entry key="displayName" value="Account"/>
      <entry key="id" value="AccountId"/>
      <entry key="category" value="CategoryB"/>
  </map>
</list>
----

Besides take one processor as representative of each @MetaDataCategory class (check their @MetaDataScope attribute value for that) and test their MetaData input and output behaviour by selecting the most representative entity.

[source,java]
----
    @Processor
    @MetaDataScope(InvokeCategory.class)
    public List<Map<String, Object>> invokeOperation(@MetaDataKeyParam String type, @Default("#[payload]") Map<String, Object> params) {
----

[source,xml]
----
<flow name="get-meta-data-get" >
    <peoplesoft:invoke-operation type="CI_POSITION_DATA#Get" config-ref="PeopleSoft" doc:name="PeopleSoft">
        <peoplesoft:params/>
    </peoplesoft:invoke-operation>
</flow>
----

[source,java]
----
@Test
@Category({RegressionTests.class, SmokeTests.class})
public void testGetProcessorIsMetaDataEnabled() {
  assertIsMetaDataEnabled("get-meta-data-get");
}

@Test
@Category({RegressionTests.class, SmokeTests.class})
public void testGetMetaDataGetInputMetaData() {
  try {
    assertFirstLevelInputMetaDataSuccess("get-meta-data-get", DataType.MAP);
  } catch (Exception e) {
    fail(ConnectorTestUtils.getStackTrace(e));
  }
}

@Test
@Category({RegressionTests.class, SmokeTests.class})
public void testGetMetaDataGetOutputMetaData() {
  try {
    assertListFirstLevelOutputMetaDataSuccess("get-meta-data-get", DataType.MAP.toString());
  } catch (Exception e) {
    fail(ConnectorTestUtils.getStackTrace(e));
  }
}
----

==== MetaDataOutputRetriever

In case that an @MetaDataOutputRetriever method is implemented test cases for it should be written with assertions on the input and output MetaData of the operations affected by its logic.

==== Input MetaData Negative cases
Logic added to handle requests to retrieve input MetaData passing an invalid type should be covered also on the GetMetaDataTestCases class.
Follow the approach of adding specific flows containing processors with an invalid type and requesting its input MetaData

Error message should relate to the connector domain.
