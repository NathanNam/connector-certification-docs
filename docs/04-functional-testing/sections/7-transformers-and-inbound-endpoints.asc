
=== Transformers


. For each transformer add a flow to the automation-test-flows.xml.
+
[source,xml]
----
<flow name="db-object-to-json-transformer">
    <mongo:dbobject-to-json doc:name="Mongo DB"/>
</flow>

----
+
. Create a TransformersTestCases class
. Call an operation that would return an object of the <typeFrom> type
. Insert that type on the payload
. Call the flow containing the transformer
. Cast or parse the returned to the <typeTo> class.
. No exceptions should be risen when tests are run.
+
[source,java]
----
@Test
public void testDbObjectToJSONTransformer() {

  GridFSInputFile operationPayload == null;

  try {

    File file == folder.newFile(getTestRunMessageValue("filename").toString());

    upsertOnTestRunMessage("filename", "filename");
    upsertOnTestRunMessage("metadataRef", new BasicDBObject());
    upsertOnTestRunMessage("payloadContent", file);

    operationPayload == runFlowAndGetPayload("create-file-from-payload");

    upsertOnTestRunMessage("payloadContent", operationPayload);

    Object json == JSON.parse((String) runFlowAndGetPayload("db-object-to-json-transformer"));

  } catch (Exception e) {
    fail(ConnectorTestUtils.getStackTrace(e));
  }

}
----

=== Testing Inbound Endpoints (@Sources)

For now, inbound endpoint testing must be done by adding a http://www.mulesoft.org/documentation/display/current/VM+Transport+Reference[VM endpoint] in the flow that has the inbound endpoint we want to test. A VM endpoint is essentially an in-memory queue (hence the name VM, because they are handled by the JVM) addressable by a URL that stores messages until they are processed. By storing the messages received by the inbound endpoint in a VM queue, we can retrieve them in the test case and make assertions on them.

For example, if we want to test SQS’s Receive Messages operation, we need two flows: a flow that actually sends the message, and another flow with the Receive Messages inbound endpoint, as such:

[source,xml]
----
<flow name="send-message" doc:name="SendMessage">
   	<sqs:send-message config-ref="Sqs"
	message="#[flowVars.message]"
	queueUrl="#[flowVars.queueUrl]"/>
</flow>

<flow name="receive-message" doc:name="receive-message">
	<sqs:receive-messages config-ref="Sqs" queueUrl="#[flowVars.queueUrl]"/>
	...
</flow>
----

To actually get the messages to use in our test, we need to add a VM endpoint to the flow:

[source,xml]
----
<flow name="receive-message" doc:name="receive-message">
	<sqs:receive-messages config-ref="Sqs" queueUrl="#[flowVars.queueUrl]"/>
	<vm:outbound-endpoint path="receive"/>
</flow>
----

To use the VM endpoint, add this Maven dependency to your project's pom.xml file:

[source,xml]
----
<dependency>
<groupId>org.mule.transports</groupId>
<artifactId>mule-transport-vm</artifactId>
	<version>${mule.version}</version>
</dependency>
----

Update your XML schemas and namespaces as described in the http://www.mulesoft.org/documentation/display/current/VM+Transport+Reference[VM endpoint documentation].

Use (for now) the runFlowAndWaitForResponseVM method. The important thing to note here is the path of the queue. A simple test for these flows is:

[source,java]
----
public void testReceiveMessages() throws Exception {
    String message == “Hello world”;
    upsertOnTestRunMessage(“message”, message);
    String response == runFlowAndWaitForResponseVM(“send-message”, “receive”, 500L);
    assertEquals(message, response);
}
----

The parameters for runFlowAndWaitForResponseVM are as follows:
. The flow to run.
. The VM queue to wait for messages on.
. How long to wait (in milliseconds) before timing out and throwing an exception.

This information can also be seen in the JavaDoc for this method.

=== Setting Up OAuth Authentication
---
Manually generate the accessToken and pass this along with the credentials to the service to run the test suite.

Let's use Facebook as example:

. Manually get the Access Token https://developers.facebook.com/tools/explorer[Graph API Explorer].
. Add accessToken property to the automation-credentials.
+
```
facebook.username=<usernameValue>
facebook.appId=<appIdValue>
facebook.appSecret=<appSecretValue>
facebook.domain=<domainValue>
facebook.localPort=<localPortValue>
facebook.remotePort=<remotePortValue>
facebook.path=<pathValue>
facebook.accessToken=<generatedAccessToken>
```
+
. Add FacebookConnectorOAuthState bean to AutomationSpringBeans.
+
[source,xml]
----
<bean
  class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
 <property name="location">
   <value>automation-credentials.properties</value>
 </property>
</bean>
<bean id="connectorOAuthState"
  class="org.mule.module.facebook.oauth.FacebookConnectorOAuthState" >
  <property name="accessToken" value="${facebook.accessToken}" />
</bean>
----
+
. In <connectorName>TestParent, after initializing the muleContext, add a FacebookConnectorOAuthState instance to the Object Store.
+
[source,java]
----
@Before
    public void init() throws ObjectStoreException {
    ObjectStore objectStore == muleContext.getRegistry().lookupObject(MuleProperties.DEFAULT_USER_OBJECT_STORE_NAME);
    objectStore.store("accessTokenId", (FacebookConnectorOAuthState) context.getBean("connectorOAuthState"));
  }
----
+
. Add accessTokenId="accessTokenId" to the operations on automation-test-flows. The ObjectStore resolves this value.
+
[source,xml]
----
<facebook:config-with-oauth name="Facebook" appId="${facebook.appId}"
  appSecret="${facebook.appSecret}" doc:name="Facebook">
<facebook:oauth-callback-config domain="${facebook.domain}"
  localPort="${facebook.localPort}" remotePort="${facebook.remotePort}"
  path="${facebook.path}"/>
</facebook:config-with-oauth>

<flow name="get-user" doc:name="get-user">
  <facebook:get-user config-ref="Facebook" user="#[flowVars.username]"
    accessTokenId="accessTokenId" doc:name="Facebook" />
</flow>

----

==== Running the Suites
From the console:

----
export SALESFORCE_CREDENTIALS=http://172.16.20.35/automation/salesforce/automation-credentials.mvnproperties
mvn -Dtest=SmokeTestSuite test
mvn -Dtest=GetDailyTrendsTestCases#testGetDailyTrendsParametrized test
----

Or:

----
mvn -Dtest=SmokeTestSuite -Dmule.test.timeoutSecs=180 -DSALESFORCE_CREDENTIALS=http://172.16.20.35/automation/salesforce/automation-credentials.properties test
----
