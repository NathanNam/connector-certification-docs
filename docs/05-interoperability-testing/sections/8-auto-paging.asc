
=== Auto-Paging
Connector supports Auto­Paging if a least one of its operations is annotated as @Paged and returns a PagingDelegate. The following test cases apply to Non­query, DSQL and NQL operations.

==== Auto-Paging - Fetch Size Parameter
===== Preconditions

* Flow contains a connector building block that is on the canvas and its Global Configuration element was selected as Config Reference.

===== Steps

* *Step 1:* Select an operation whose return type is PagingDelegate<SomeEntity>.
+
----
Expected Result:
Paging section containing a Fetch Size input field is displayed in the General tab of the connector view.
----

+
image::images/qa-guidelines-18.png[]

Fetch Size value is 100 by default.


* *Step 2:* Enter a Fetch Size value other than 100. Save and change to the Configuration XML view.

+
[source,xml]
----
Expected Result:

fetchSize attribute is on the operation XML.
<google-contacts:get-contacts config-ref="Google_Contacts" doc:name="Google Contacts" fetchSize="30"/>
----

==== Auto-Paging - Empty Collection
==== ￼Preconditions

* Global Configuration element was already crea

===== Steps
* *Step 1:* Arrange a flow as follows:
.. Place an *HTTP* connector on the canvas.
.. Drop the desired connector in the flow.
.. Next to the connector place a *For Each* scope.
.. Inside the *For Each* place a *Logger* element.
.. After the *For Each* place a *Set Payload* element.
+
----
Expected Result:
Flow arrangement looks similar to this:
----
+
image::images/qa-guidelines-19.png[]


* *Step 2:*
.. On the connector, select an operation whose return type is PagingDelegate<SomeEntity>.
.. Set parameter values such as no records are returned by the operation.
.. Click Save.

+
----
Expected Result:
Metadata is fetched for the selected operation.
----

* *Step 3:* Set +For element #[flowVars['counter']] payload is #[message.payload]+ as the *Logger* message value. Click *Save*.

* *Step 4:* Set +Done.+ as the *Set Payload* element Value. Click *Save*.

+
Example of a complete flow result:

+
[source,xml]
----
<http:listener-config name="HTTP_Listener_Configuration" host="localhost" port="8081" doc:name="HTTP Listener Configuration"/>

<flow name="features-autopaging-certFlow1"
doc:name="features-autopaging-certFlow1">

<http:listener config-ref="HTTP_Listener_Configuration" path="contacts" doc:name="HTTP"/>

    <google-contacts:authorize config-ref="Google_Contacts"
  doc:name="Authorize"/>

    <google-contacts:get-contacts config-ref="Google_Contacts" doc:name="Get contacts" updatedMax="2000-09-29T18:46:19-0700" datetimeFormat="yyyy-MM-dd'T'HH:mm:ssZ"/>

     <foreach doc:name="For Each">
       <logger message="For element #[flowVars['counter']] payload is #[message.payload]" level="INFO" doc:name="Logger"/>
  </foreach>

   <set-payload value="Done." doc:name="SetPayload"/>
</flow>
----

* *Step 5:* Run the app and hit the flow endpoint. Check the console afterwards.
+
----
Expected Result:
org.mule.routing.Foreach$CollectionMapSplitter: Splitter returns no results. If this is not expected, check your split expression.
Logs to the console.
----

==== Auto-Paging - Abort Iteration
Verify that after processing current element, iteration is terminated.
====￼= Preconditions

* Global Configuration element has been created with valid credentials to the service.

===== Steps

* *Step 1:* Arrange a flow as follows:
.. Place an *HTTP* connector on the canvas.
.. Drop the desired connector in the flow.
.. Next to the connector, place the *Logger* element.
.. Next to the *Logger* put a *For Each* scope.
.. Inside the *For Each*, place a *Logger*, a DataMapper, and another *Logger*.
.. Following the *For Each*, place a *Set Payload* element.
+
----
Expected Result:
Flow arrangement looks similar to this:
----
+
image::images/qa-guidelines-20.png[]


* *Step 2:*
.. On the connector select an operation whose return type is
PagingDelegate<SomeEntity>.
.. Open Query Builder and generate a simple
query such as: SELECT CreatedById,CreatedDate,Description, OwnerId FROM Account LIMIT 3.
.. Set a fetchSize value of 1 or lower than the amount the amount of records been returned.
.. Click *Save*.

+
----
Expected Result:
Metadata fetches for the selected operation.
----

* *Step 3:*  Set `# Total amount of elements retrieved is
#[message.payload.size()]` as the first
*Logger* message value. Click *Save*.

* *Step 4:* Select the *For Each* and set rootMessage as its +Root Message Variable Name+. Click *Save*.

* *Step 5:* Set +Closing the iterator: #[flowVars['rootMessage'].getPayload ().close()]+ as the message value for the first *Logger* within the *For Each*. Click *Save*.

* *Step 6:*  On the DataMapper element, create a mapping to a Default `Map<k,v>` object.
+
----
Expected Result:
Mapping is created.
----

* *Step 7:* Set +For element #[flowVars['counter']] payload is #[message.payload]+ as the *Logger* message value. Click *Save*.

* *Step 8:* Set +Done.+ as the Set payload element Value. Click *Save*.

+
Example of a complete result flow:

+
[source,xml]
----
<http:listener-config name="HTTP_Listener_Configuration" host="localhost" port="8081" doc:name="HTTP Listener Configuration"/>

<flow name="features-autopaging-salesforceFlow1"
doc:name="features-autopaging-salesforceFlow1">

<http:listener config-ref="HTTP_Listener_Configuration" path="apforeach" doc:name="HTTP"/>

   <sfdc:query config-ref="Salesforce" query="dsql:SELECT CreatedById,CreatedDate,Description,OwnerId FROM Account LIMIT 3"
   doc:name="Query" fetchSize="2"/>

  <logger message="### Total amount of elements retrieved is #[payload.size()]"
  level="INFO" doc:name="Size"/>

  <foreach doc:name="For Each">
     <data-mapper:transform config-ref="account_to_map" doc:name="Account To Map"/>
     <logger message="For element #[flowVars['counter']] payload is
    #[message.payload]" doc:name="Records"/>
  </foreach>

  <set-payload value="Done." doc:name="Set Payload"/>
</flow>
----

* *Step 10:*  Run the app and hit the flow endpoint.
* *Step 11:*  Look for the messages logged by the Records Logger on the console.

----
Expected Result:

Only a message for the first record logs.
----

=== Non-Query Operations
As example, use Google Contacts connectors.

==== Auto-Paging - Non-Query Operation - Auto-Paged Output Handling - DataMapper
PagingDelegate is typed thus it's expected to work together with DataMapper.

===== ￼Preconditions

* Global Configuration element was already created with valid credentials to the service.

===== Steps

* *Step 1:* Arrange a flow as follows:
.. Place an *HTTP* connector on the canvas.
.. Drop the desired connector in the flow.
.. Next to the connector, place a DataMapper element.
+
----
Expected Result:
----
+
image::images/qa-guidelines-21.png[]

* *Step 2:* On the connector, select an operation whose return type is PagingDelegate<SomeEntity>. Click *Save*.

+
----
Expected Result:
Metadata fetches for the selected operation.w
----

* *Step 3:*
Click the DataMapper element.
+
----
Expected Result:

Mule automatically prescribes the output of the operation as List<SomeEntity>. The type is in the connector code, for example: `List<GoogleContactEntry>`
for an operation returns: `PagingDelegate<GoogleContactEntry>`
----

* *Step 4:* In the Output Panel select:
.. Type: Map<k,v>
.. Click User Defined
.. Click Generate default
.. Click Create mapping

+
----
Expected Result:
Mapping creates.
----

==== Auto-Paging - Non-Query Operation - Auto-Paged Output Handling - Foreach Combined with DataMapper

===== Preconditions

* Global Configuration element was already created with valid credentials to the service.

===== Steps

* *Step 1:* Arrange a flow as follows:
.. Place an *HTTP* connector on the canvas.
.. Drop the desired connector in the flow.
.. Next to the connector, place a *For Each* scope.
.. Inside the *For Each*, place a DataMapper element.
+
----
Expected Result:
----
+
image::images/qa-guidelines-22.png[]

* *Step 2:* On the connector, select an operation whose return type is PagingDelegate<SomeEntity>. Click *Save*.
+
----
Expected Result:
Metadata fetches for the selected operation.w
----

* *Step 3:*
Click the DataMapper element.
+
----
Expected Result:
Mule automatically prescribes the output of the operation as `SomeEntity`.
The type is in the connector code, for example: `GoogleContactEntry` for an operation returns: `PagingDelegate<GoogleContactEntry>`
----

* *Step 4:* In the Output Panel select:
.. Type: Map<k,v>
.. Click User Defined
.. Click Generate default
.. Click Create mapping

+
----
Expected Result:
Mapping creates.
----

==== Auto-Paging - Non-Query Operation - Pagination is Applied

===== Preconditions

* Global Configuration element was already created with valid credentials to the service.

===== Steps

* *Step 1:* Arrange a flow as follows::
.. Place an *HTTP* connector on the canvas.
.. Drop the desired connector in the flow.
.. Next to the connector place a *Logger* element.
.. Next to the *Logger* put a For Each element.
.. Inside the *For Each* place a DataMapper and then a *Logger* next to it.
.. After the *For Each* place a *Set Payload* element.
+
----
Expected Result
Flow arrangement looks similar to this:
----
image::images/qa-guidelines-23.png[]


* *Step 2:*
.. On the connector, select an operation whose return type is PagingDelegate<SomeEntity>.
.. Set a fetchSize value of 1 or lower than the amount of records that's going to be retrieved.
.. Click *Save*.
+
----
Expected Result:
Metadata fetches for the selected operation.
----

* *Step 3:* Set +### Total amount of elements retrieved is
#[message.payload.size()]+ as the
*Logger* message value. Click *Save*.

* *Step 4:* On the DataMapper element, create a mapping to a Default Map<k,v> object.
Mapping creates.

* *Step 5:* Set +For element #[flowVars['counter']] payload is #[message.payload]+ as the *Logger* message value. Click *Save*.

* *Step 6:* Set +Done.+ as the *Set Payload* element Value. Click *Save*.
+
Example of a complete flow:
+
[source,xml]
----
<http:listener-config name="HTTP_Listener_Configuration" host="localhost" port="8081" doc:name="HTTP Listener Configuration"/>

<flow name="features-autopaging-datamapper-complianceFlow3"
doc:name="features-autopaging-datamapper-complianceFlow3">

<http:listener config-ref="HTTP_Listener_Configuration" path="foreachdm" doc:name="HTTP"/>

    <google-contacts:authorize config-ref="Google_Contacts"
    doc:name="Authorize"/>

    <google-contacts:get-groups config-ref="Google_Contacts"
    doc:name="Get groups"/>

    <logger message="### Total amount of elements retrieved is
  #[message.payload.size()]" level="INFO" doc:name="Size"/>

    <foreach doc:name="For Each">
      <data-mapper:transform doc:name="DataMapper"/>
      <logger message="For element #[flowVars['counter']] payload is
    #[message.payload]" doc:name="Records"/>
  </foreach>

    <set-payload doc:name="Set Payload" value="Done."/>
</flow>
----

* *Step 7:* Run the app and hit the flow endpoint.

* *Step 8:* Look for the messages logged by the Records Logger on the console.
+
----
Expected Result:
For each record a +For element ... + message was logged displaying its payload.
----

* *Step 9:* Look for the message of the Size Logger on the console.
+
----
Expected Result:
Amount of elements retrieved equals number of records returned.
Note: You can override the getTotalResults() method in the connector in case of service constraints.For this case, a value of ­1 is returns if the size can't be provided.
----

==== Auto-Paging - Non-Query Operation - Pagination is Not Applied
===== Preconditions

* Global Configuration element was already created with valid credentials to the service.

===== Steps

* *Step 1:* Arrange a flow as follows::
.. Place an *HTTP* connector on the canvas.
.. Drop the desired connector in the flow.
.. Next to the connector, place a *Logger* element.
.. Next to the *Logger*, place a *For Each* scope.
.. Inside the *For Each*, place a DataMapper and then a *Logger* next to it.
.. After the *For Each*, place a *Set Payload* element.
+
----
Expected Result:
Flow arrangement looks similar to this:
----
+
image::images/qa-guidelines-24.png[]

* *Step 2:*
.. On the connector, select an operation whose return type is PagingDelegate<SomeEntity>.
.. Set a fetchSize higher than amount of existing records.
.. Click *Save*.
+
----
Expected Result:

Metadata fetches for the selected operation.
----
* *Step 3:*  Set +### Total amount of elements retrieved is
#[message.payload.size()]+ as the
*Logger* message value. Click *Save*.

* *Step 4:* On the DataMapper element, create a mapping to a Default Map<k,v> object.
+
----
Expected Result:

Mapping is created.
----

* *Step 5:* Set +For element #[flowVars['counter']] payload is #[message.payload]+ as the *Logger* message value. Click *Save*.

* *Step 6:*  Set +Done.+ as the *Set Payload* element Value. Click *Save*.
+
Example of a complete flow:
+
[source,xml]
----
<http:listener-config name="HTTP_Listener_Configuration" host="localhost" port="8081" doc:name="HTTP Listener Configuration"/>

<flow name="features-autopaging-datamapper-complianceFlow3"
doc:name="features-autopaging-datamapper-complianceFlow3">

<http:listener config-ref="HTTP_Listener_Configuration" path="foreachdm" doc:name="HTTP"/>

    <google-contacts:authorize
  config-ref="Google_Contacts"
  doc:name="Authorize"/>

    <google-contacts:get-groups
  config-ref="Google_Contacts" doc:name="Get groups"/>

    <logger message="### Total amount of elements retrieved is
  #[message.payload.size()]" level="INFO"
  doc:name="Size"/>

  <foreach doc:name="For Each">
        <data-mapper:transform
      doc:name="DataMapper"/>
        <logger message="For element #[flowVars['counter']]  payload is
      #[message.payload]" doc:name="Records"/>
  </foreach>
    <set-payload doc:name="Set Payload" value="Done."/>
</flow>
----

* *Step 7:* Look for the messages logged by the Records Logger on the console.
+
----
Expected Result:

For each record a +For element ... + message was logged displaying its payload.
----

* *Step 8:*  Look for the message of the Size Logger on the console.
+
----
Amount of elements retrieved equals number of records returned.
----
NOTE: You can override the getTotalResults() method in the connector in case of service constraints.For this case, a value of ­1 is returns if size can't be provided.


=== Auto-Paging DSQL Interoperability
An example that uses the Salesforce/NetSuite connectors.

==== DataSense Query Language

==== Auto-Paging - DSQL - Auto-Paged Output Handling - DataMapper

===== Preconditions

* Global Configuration Element was already created with valid credentials to the service.

===== Steps

* *Step 1:* Arrange a flow as follows:
.. Place an *HTTP* connector on the canvas.
.. Drop the desired connector in the flow.
.. Next to the connector, place a DataMapper element.
+
----
Expected Result:
----
+
image::images/qa-guidelines-25.png[]

* *Step 2:*
.. On the connector select an operation whose return type is PagingDelegate<SomeEntity> and has one of its parameters annotated with @Query.
.. Select DataSense Query Language as Language.
.. Using Object Builder create a simple query involving a couple of fields, for example: SELECT AccountSource,BillingCity,BillingLon gitude,CreatedDate FROM Account.
.. Click Save.

+
----
Expected Result:
Metadata is fetched for the selected operation.
----

* *Step 3:* Click on the DataMapper element.
+
----
Expected Result:
Mule automatically prescribes the output of the operation as List<SomeEntity>. The type is in the connector code, for example: PagingDelegate<Map<String, Object>>
for an operation returns: PagingDelegate<Map<String, Object>>
----

* *Step 4:* In the Output Pane select:
.. Type: Map<k,v>
.. Click User Defined
.. Click Generate default
.. Click Create mapping
+
----
Expected Result:
Mapping involving only the fields been queried is created.
----
+
image::images/qa-guidelines-26.png[]

==== Auto-Paging - DSQL - Auto-Paged Output Handling - Foreach Combined with DataMapper

===== Preconditions

* Global Configuration element was already created with valid credentials to the service.

===== Steps

* *Step 1:* Arrange a flow as follows:
.. Place an *HTTP* connector on the canvas.
.. Drop the desired connector in the flow.
.. Next to the connector, place a *For Each* scope.
.. Inside the *For Each* place a DataMapper element.
+
----
Expected Result:
----
image::images/qa-guidelines-27.png[]


* *Step 2:*
.. On the connector select an operation whose return type is
PagingDelegate<SomeEntity> and has one of its parameters annotated with @Query.
.. Select DataSense Query Language as Language.
.. Using Object Builder create a simple query involving a couple of fields, for example: SELECT AccountSource,BillingCity,BillingLon gitude,CreatedDate FROM Account
.. Click Save.
+
----
Expected Result:

Metadata fetches for the selected operation.
----

* *Step 3:* Click the DataMapper element.
+
----
Expected Result:

Mule automatically prescribes the output of the operation as List<SomeEntity>. The type is in the connector code, for example: PagingDelegate<Map<String, Object>>
for an operation returns: PagingDelegate<Map<String, Object>>
----

* *Step 4:* In the Output Pane select:
.. Type: Map<k,v>
.. Click User Defined
.. Click Generate default
.. Click Create mapping
+
----
Expected Result:

Mapping involving only the fields being queried is created.
----
image::images/qa-guidelines-28.png[]

==== Auto-Paging - DSQL - Pagination is Applied

===== Preconditions

* Global Configuration element was already created with valid credentials to the service.

===== Steps

* *Step 1:* Arrange a flow as follows:
.. Place an *HTTP* connector on the canvas.
.. Drop the desired connector in the flow.
.. Next to the connector place *Logger* element.
.. Next to the *Logger* put a *For Each* scope.
.. Inside the *For Each* place a DataMapper and then a *Logger* next to it.
.. After the *For Each*, place a *Set Payload* element.
+
----
Expected Result:

Flow arrangement looks similar to this:
----
image::images/qa-guidelines-29.png[]

* *Step 2:*
.. On the connector, select an operation whose return type is PagingDelegate<SomeEntity>.
.. Open Query Builder and generate a simple query such as: SELECT. CreatedById,CreatedDate,Descripti on,OwnerId FROM Account LIMIT 3
.. Set a fetchSize value of 1 or lower than the amount of records being returned.
.. Click Save.
+
----
Expected Result:
￼
Metadata fetches for the selected operation.
----

* *Step 3:*
.. Set +### Total amount of elements retrieved is
#[message.payload.size()]+ as the
*Logger* message value. Click *Save*.

* *Step 4:* On the DataMapper element creating a mapping to a Default Map<k,v> object.
+
----
Expected Result:

Mapping creates.
----

* *Step 5:* Set +For element #[flowVars['counter']] payload is #[message.payload]+ as the *Logger* message value. Click *Save*.

* *Step 6:* Set +Done.+ as the *Set Payload* element Value. Click *Save*.
+
Example of a complete flow:
+
[source,xml]
----
<http:listener-config name="HTTP_Listener_Configuration" host="localhost" port="8081" doc:name="HTTP Listener Configuration"/>

<flow name="features-autopaging-salesforceFlow1"
doc:name="features-autopaging-salesforceFlow1">

<http:listener config-ref="HTTP_Listener_Configuration" path="apforeach" doc:name="HTTP"/>

 <sfdc:query config-ref="Salesforce"
      query="dsql:SELECT
      CreatedById,CreatedDate,Description,OwnerId
      FROM Account LIMIT 3" doc:name="Query"
      fetchSize="2"/>

  <logger message="### Total amount of
      elements retrieved is
      #[message.payload.size()]" level="INFO"
      doc:name="Size"/>

  <foreach doc:name="For Each">
        <data-mapper:transform
        config-ref="account_to_map" doc:name="Account
        To Map"/>

            <logger message="For element
        #[flowVars['counter']]  payload is
        #[message.payload]" doc:name="Records"/>
        </foreach>

  <set-payload value="Done." doc:name="Set Payload"/>
</flow>
----

* *Step 7:* Run the app and hit the flow endpoint.
* *Step 8:* Look for the messages logged by the Records Logger on the console.
+
----
Expected Result:
For each record a +For element ... + message was logged displaying its payload.
----

* *Step 9:*  Look for the message of the Size Logger on the console.
+
----
Expected Result:
Amount of elements retrieved equals number of records returned.
----

==== Auto-Paging - DSQL - Pagination is Not Applied

===== Preconditions

* Global Configuration element was already created with valid credentials to the service.

===== Steps

* *Step 1:* Arrange a flow as follows:
.. Place an *HTTP* connector on the canvas.
.. Drop the desired connector in the flow.
.. Next to the connector, place *Logger* element.
.. Next to the *Logger*, place a *For Each* scope.
.. Inside the *For Each*, place a DataMapper
and then a *Logger* next to it.
.. After the *For Each*, place a *Set Payload*
element.
+
----
Expected Result:

Flow arrangement looks similar to this:
----
+
image::images/qa-guidelines-30.png[]

* *Step 2:*
.. On the connector, select an operation whose return type is
PagingDelegate<SomeEntity>.
.. Open Query Builder and generate a simple
query such as: SELECT CreatedById,CreatedDate,Description, OwnerId FROM Account LIMIT 1
.. Set a fetchSize value higher than the amount of records being returned.
.. Click *Save*.
+
----
Expected Result:

Metadata is fetched for the selected operation.
----

* *Step 3:* Set +### Total amount of elements retrieved is
#[message.payload.size()]+ as the
*Logger* message value. Click *Save*.

* *Step 4:* On the DataMapper element create a mapping to a Default +Map<k,v>+ object.
+
----
Expected Result:

Mapping creates.
----

* *Step 5:* Set +For element #[flowVars['counter']] payload is #[message.payload]+ as the *Logger* message value. Click *Save*.

* *Step 6:* Set +Done.+ as the *Set Payload* element Value. Click *Save*.
+
Example of a complete flow:
+
[source,xml]
----
<http:listener-config name="HTTP_Listener_Configuration" host="localhost" port="8081" doc:name="HTTP Listener Configuration"/>

<flow name="features-autopaging-salesforceFlow1"
doc:name="features-autopaging-salesforceFlow1">

<http:listener config-ref="HTTP_Listener_Configuration" path="apforeach" doc:name="HTTP"/>

  <sfdc:query config-ref="Salesforce"
      query="dsql:SELECT
      CreatedById,CreatedDate,Description,OwnerId
      FROM Account LIMIT 3" doc:name="Query"
      fetchSize="2"/>

  <logger message="### Total amount of
      elements retrieved is
      #[message.payload.size()]" level="INFO"
      doc:name="Size"/>

   <foreach doc:name="For Each">
       <data-mapper:transform
        config-ref="account_to_map" doc:name="Account To Map"/>

       <logger message="For element
        #[flowVars['counter']]  payload is
        #[message.payload]" doc:name="Records"/>
  </foreach>

  <set-payload value="Done." doc:name="Set
  Payload"/>
</flow>
----

* *Step 7:* Run the app and hit the flow endpoint.
* *Step 8:* Look for the messages logged by the Records Logger on the console.
+
----
Expected Result:
For each record a +For element ... + message was logged displaying its payload.
----

* *Step 9:* Look for the message of the Size Logger on the console.
+
----
Expected Result:

Amount of elements retrieved equals number of records returned.
Note: You can override the getTotalResults() method in the connector in case of service constraints.
----

==== Native Query Language

==== Auto-Paging - NQL - Auto-Paged Output Handling - DataMapper

===== Preconditions

* Global Configuration element was already created with valid credentials to the service.

* *Step 1:* Arrange a flow as follows:
.. Place an *HTTP* connector on the canvas.
.. Drop the desired connector in the flow.
.. Next to the connector, place a DataMapper element.
+
----
Expected Result:
----
+
image::images/qa-guidelines-31.png[]

* *Step 2:*
.. On the connector select an operation whose return type is PagingDelegate<SomeEntity> and has one of its parameters annotated with @Query.
.. Select Native Query Language as Language.
.. Enter a simple query as Query Text: SELECT
   AccountSource,BillingCity,BillingLon
   gitude,CreatedDate FROM Account
.. As Return type select the same Object as stated in the FROM field of the query.
.. Click Save.
----
Expected Result:

Metadata is fetched for the selected operation.
----

* *Step 3:*
Click the DataMapper element.
----
Expected Result:

Mule automatically prescribes the output of the operation as List<SomeEntity>. The type is in the connector code, for example: PagingDelegate<Map<String, Object>> for an operation returns: PagingDelegate<Map<String, Object>>
----

* *Step 4:* In the Output Pane select:
.. Type: Map<k,v>
.. Click User Defined
.. Click Generate default
.. Click Create mapping
+
----
Expected Result:

Mapping involving only the fields been queried is created.
----
image::images/qa-guidelines-32.png[]

==== Auto-Paging - NQL - Auto-Paged Output Handling - Foreach Combined with DataMapper

===== Preconditions

* Global Configuration element was already created with valid credentials to the service.

* *Step 1:* Arrange a flow as follows:
.. Place an *HTTP* connector on the canvas.
.. Drop the desired connector in the flow.
.. Next to the connector, place a *For Each* element.
.. Inside the *For Each* place a DataMapper element.

* *Step 2:* On the connector select an operation whose return type is PagingDelegate<SomeEntity> and has one of its parameters annotated with @Query.
.. Select Native Query Language as Language.
.. Enter a simple query as Query Text: SELECT
       AccountSource,BillingCity,BillingLon
       gitude,CreatedDate FROM Account
.. As Return type, select the same Object as stated in the FROM field of the query.
.. Click *Save*.

+
----
Expected Result:

Metadata is fetched for the selected operation.
----

* *Step 3:*  Click the DataMapper element.
+
----
Expected Result:

Mule automatically prescribes the output of the operation as List<SomeEntity>. The type is in the connector code, for example: +PagingDelegate<Map<String, Object>>+
for an operation returns: +PagingDelegate<Map<String, Object>>+
----
* *Step 4:*  In the Output Pane select:
.. Type: Map<k,v>
.. Click User Defined
.. Click Generate default
.. Click Create mapping
+
----
Expected Result:

Mapping involving only the fields been queried is created.
----
image::images/qa-guidelines-33.png[]

==== Auto-Paging - NQL - Pagination is Applied

===== Preconditions

* Global Configuration element was already created with valid credentials to the service.

* *Step 1:*  Arrange a flow as follows:
.. Place an *HTTP* connector on the canvas.
.. Drop the desired connector in the flow.
.. Next to the connector, place a *Logger* element.
.. Next to the *Logger*, place a *For Each* element.
.. Inside the *For Each*, place a DataMapper and then a *Logger* next to it.
.. After the *For Each*, place a *Set Payload* element.
￼
+
----
Flow arrangement looks similar to this:
----
image::images/qa-guidelines-34.png[]

* *Step 2:*
.. On the connector select an operation whose return type is PagingDelegate<SomeEntity>.
.. Select Native Query Language as Language.
.. Enter a simple query as Query Text: SELECT
   AccountSource,BillingCity,BillingLon
   gitude,CreatedDate FROM Account
.. As Return type select the same Object as stated in the FROM field of the query.
.. Set a fetchSize value of 1 or lower than the amount the amount of records been returned.
.. Click Save.
+
----
Expected Result:
Metadata is fetched for the selected operation.
----

* *Step 3:* Set +### Total amount of elements retrieved is
#[message.payload.size()]+ as the
*Logger* message value. Click *Save*.

* *Step 4:*  On the DataMapper element creating a mapping to a Default Map<k,v> object.
+
----
Expected Result:
Mapping is created.
----

* *Step 5:* Set +For element #[flowVars['counter']] payload is #[message.payload]+ as the *Logger* message value. Click *Save*.

* *Step 6:* Set +Done.+ as the *Set Payload* element Value. Click *Save*.

* *Step 7:* Run the app and hit the flow endpoint.

* *Step 8:*   Look for the messages logged by the Records Logger on the console.
+
----
Expected Result:
For each record a +For element ... + message was logged displaying its payload.
----

* *Step 9:* Look for the message of the Size Logger on the console.
+
----
Expected Result:
Amount of elements retrieved equals number of records returned.
----

==== Auto-Paging - NQL - Pagination is Not Applied

===== Preconditions

* Global Configuration element was already created with valid credentials to the service.

* *Step 1:* Arrange a flow as follows:
.. In Studio, place an *HTTP* connector on the canvas.
.. Place a connector in the flow.
.. Next to the connector, place a *Logger* element.
.. Next to the *Logger*, place a *For Each* element.
.. Inside the *For Each*, place a *DataMapper* and then a *Logger* next to it.
.. After the *For Each*, place a *Set Payload* element.
+
----
Flow arrangement looks similar to this:
----
image::images/qa-guidelines-35.png[]


* *Step 2:*
.. For your connector, select an operation whose return type is +PagingDelegate<SomeEntity>+.
Metadata fetches for the selected operation.
.. Open Query Builder and generate a simple query such as: +SELECT CreatedById,CreatedDate,Description,OwnerId FROM Account LIMIT 1+
.. Set a fetchSize value higher than the number of records that have been returned.
.. Click *Save*.


* *Step 3:* Set +### Amount of elements retrieved is #[message.payload.size()]+ as the
*Logger* message value. Click *Save*.


* *Step 4:*  On the DataMapper element create a mapping to a Default +Map<k,v>+ object.
+
----
Expected Result:
Mapping is created.
----


* *Step 5:* Set +For element #[flowVars['counter']] payload is #[message.payload]+ as the *Logger* message value. Click *Save*.

* *Step 6:* Set +Done.+ as the *Set Payload* element Value. Click *Save*.
+
Example of a complete flow:
+
[source,xml]
----
<http:listener-config name="HTTP_Listener_Configuration" host="localhost" port="8081" doc:name="HTTP Listener Configuration"/>

<flow name="features-autopaging-salesforceFlow3"
doc:name="features-autopaging-salesforceFlow3">

<http:listener config-ref="HTTP_Listener_Configuration" path="/" doc:name="HTTP"/>

    <sfdc:query config-ref="Salesforce"
  query="SELECT
  AccountSource,BillingCity,BillingLongitude,CratedDate
  FROM Account" doc:name="Salesforce"/>

  <logger message="### Total amount of elements retrieved is
  #[message.payload.size()]" level="INFO"
  doc:name="Size"/>

    <foreach doc:name="For Each">
      <data-mapper:transform
    config-ref="account_to_map_1"
    doc:name="Account To Map"/>

      <logger message="For element
    #[flowVars['counter']]  payload is
    #[message.payload]" doc:name="Records"/>
  </foreach>
  <set-payload value="Done." doc:name="Set Payload"/>
</flow>
----

* *Step 7:* Run the app and hit the flow endpoint.

* *Step 8:* Look for the messages logged by the Records Logger on the console.
+
----
Expected Result:
For each record a +For element ... + message was logged displaying its payload.
----

* *Step 9:* Look for the message of the Size Logger on the console.
+
----
Expected Result:

Amount of elements retrieved equals number of records returned.
Note: You can override the getTotalResults() method in the connector in case of service constraints.
----
