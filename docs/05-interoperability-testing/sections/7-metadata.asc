
=== Metadata
==== Dynamic Metadata
Supported by Non­OAuth connectors.

===== Dynamic Metadata - Enable DataSense - Positive - String Values
[cols=".^10%,.^45%,.^45%"]
|===
|Step|Description|Expected Result

|1|Open Global Configuration element.| Enable DataSense checkbox displays and is checked by default.
|2|Populate all Connection mandatory fields with valid credentials and click *OK*.| Getting DataSense metadata types finishes successfully and configuration is saved.
|===

===== Dynamic Metadata - Enable DataSense - Positive - Placeholders as Credentials
*Preconditions*

* mule.properties file contains properties values that are under src/main/resources.
* Property placeholder element referencing mule.properties was created.

[cols=".^10%,.^45%,.^45%"]
|===
|Step|Description|Expected Result

|1|Open Global Configuration element.| Enable DataSense checkbox displays and is checked by default
|2|Populate all Connection mandatory fields with property placeholders and click the *Test connectivity* button.| Getting DataSense metadata types finishes successfully and configuration is saved.
|===

Run the following set of test cases at operation level. For each of the connector operations, evaluate which set of the following test cases applies. Also, take into account that more than one attribute of an operation supports this configuration.
[cols=".^10%,.^45%,.^45%"]
|===
|Step|Description|Expected Result

|1|Open Global Configuration element.| Enable DataSense checkbox displays and is checked by default.
|2|Populate all Connection mandatory fields with property placeholders and click *OK*.| Getting DataSense metadata types doesn't display and the configuration is saved.
|===

===== Dynamic Metadata - Enable DataSense - Positive - Disable DataSense

[cols=".^10%,.^45%,.^45%"]
|===
|Step|Description|Expected Result

|1|Open *Global Configuration element*.|*Enable DataSense* checkbox displays and is checked by default.
|2|Populate all *Connection* mandatory fields with valid credentials.|
|3|Uncheck Enable DataSense checkbox.|
|4|Click *OK*.|Getting DataSense metadata types doesn't display and the configuration is saved.

|===

===== Dynamic Metadata - Enable DataSense - Negative - Invalid Credentials
[cols=".^10%,.^45%,.^45%"]
|===
|Step|Description|Expected Result

|1|Open Global Configuration element.|Enable DataSense checkbox displays and is checked by default.
|2|One at the time, leave empty the value of one of the Connection mandatory fields and click *OK*.|Getting DataSense metadata types fails. org.mule.api.ConnectionException is raised stating a useful error message to the user.
|===
The http://mulesoft.github.io/marketo-connector/mule/marketo-config.html#sync-lead[sync­lead operation of the Marketo connector] is used to demonstrate.

===== Dynamic Metadata - XML Generation - Custom Entities and Fields - Object Attributes Defined Through the Object Builder
*Preconditions*

* On the connector, Global Configuration DataSense is enabled and DataSense metadata types were fetched successfully.
* In the Anypoint Studio canvas, place a connector building block inside a flow.
* Connector was selected.
* Operation under test consumes an entity for which a custom entity or custom fields on an entity were defined on the service.
* No DataSense metadata was fetched for the operation under test.

[cols=".^10%,.^45%,.^45%"]
|===
|Step|Description|Expected Result

|1|On the General tab select the corresponding Config reference.|
|2|Select the operation.|
|3|Select an Object type (if not already defined by default by the operation) that's custom or has a custom field.|List of Object types display based on the retrieved metadata from the service.
|4|For the child elements, select the Create Objects manually option and click the ... (browse) button.| Getting DataSense metadata ... popup displays. Object builder displays Objects fields. Defined custom field displays among them.
|5|Populate the desired object fields and click *OK*.|
|6|Save and change to the *Configuration XML* view.|
Operation configuration is reflected on the XML. Example XML:
----
<marketo:sync-lead config-ref="Marketo" doc:name="Marketo">
<marketo:lead-record >
<marketo:lead-record key="City">#[flowVars['City']]</marketo:lead-r ecord>
<marketo:lead-record key="AnnualRevenue">#[flowVars['AnnualRevenue' ]]</marketo:lead-record>
<marketo:lead-record key="Department">#[flowVars['Department']]</ma rketo:lead-record>
<marketo:lead-record key="Company">#[flowVars['Company']]</marketo: lead-record>
</marketo:lead-record> </marketo:sync-lead>
----
|===

==== Static Metadata
In case of static metadata, Anypoint Studio retrieves the POJO, List<POJO>, or Map<String,POJO>attribute from the connector code.

OAuth connectors with static metadata support:

* Salesforce (Non­OAuth)

===== Static Metadata - Non DataSense-Enabled
[cols=".^10%,.^45%,.^45%"]
|===
|Step|Description|Expected Result

|1|Open Global Configuration element.| Enable DataSense checkbox is not displayed.
|===

Run the following set of test cases at operation level. For each of the connector operations, evaluate which set of the following test cases applies. Also, take into account that more than one attribute of an operation supports this configuration.

===== Static Metadata - XML Generation - Object Attributes Defined Through the Object Builder
*Preconditions*

* On the connector Global Configuration, DataSense metadata types were fetched successfully.
* In the Anypoint Studio canvas, a connector building block was placed inside a flow.
* Connector is selected.
* No DataSense metadata was fetched for the operation under test.

[cols=".^10%,.^45%,.^45%"]
|===
|Step|Description|Expected Result

|1|On the General tab, select the corresponding Config reference.|
|2|Select the operation.|
|3|Randomly select an Object type (if not already defined by default by the operation).| Object types are based on the metadata retrieved from the connector.
|4|For the child elements, select the Create Objects manually option and click the ... (browse) button.|Getting DataSense metadata ... popup displays. Object builder displays Objects fields.
|5|Populate the desired object fields and click *OK*.|
|6|Save and change to the Configuration XML view.| Operation configuration is reflected on the XML.
|===

==== Metadata / XML Generation
===== Metadata - XML Generation - Non-OAuth - Positive - Object Attributes Not Defined
*Preconditions*

* For Non­OAuth connectors that support dynamic metadata, on the connector Global Configuration DataSense was enabled and DataSense metadata types were fetched successfully.
* In the Anypoint Studio canvas, a connector building block was placed inside of a flow.
* Connector was selected.
* No DataSense metadata was fetched for the operation under test yet.

[cols=".^10%,.^45%,.^45%"]
|===
|Step|Description|Expected Result

|1|On the General tab select the corresponding Config reference.|
|2|Select the operation.|
|3|Randomly select an Object type (if not already defined by default by the operation).|
|4|As child elements, select the None option.|
|5|Save|
|6|Save and change to the Configuration XML view.| Getting DataSense metadata ... popup displays.
|===

===== Metadata - XML Generation - Non-OAuth - Positive - Object Attributes Passed by Reference
*Preconditions*

* For Non­OAuth connectors that support dynamic metadata, on the connector Global Configuration, DataSense was enabled and DataSense metadata types were fetched successfully.
* In the Anypoint Studio canvas, a connector building block was placed inside a flow.
* Connector was selected.
* No DataSense metadata was fetched for the operation under test.

[cols=".^10%,.^45%,.^45%"]
|===
|Step|Description|Expected Result

|1|On the General tab select the corresponding Config reference.|
|2|Select the operation.|
|3|Randomly select an Object type (if not already defined by default by the operation).|
|4|For the child elements, select the From Message option and enter #[flowVars['objectRef']]as the value.|
|5|Save.| Getting DataSense metadata ... popup displays.
|6|Change to the Configuration XML view.| Operation configuration is reflected on the XML. Example XML above

|===

[source,xml]
----
<code>
    <marketo:sync-lead config-ref="Marketo" doc:name="Marketo">
    <marketo:lead-record ref="#[flowVars['leadRecordRef']]"/>
    </marketo:sync-lead>
</code>
----


===== No Metadata
This is defined by the argument types and return types of the API. If all of them are either primitive types or of type InputStream, the connector falls in the No metadata category.



=== XML Generation
==== XML Generation - POJO by ‘Reference or expression’ or ‘Define attributes’
===== Steps

* *Step 1:* On the General tab select the corresponding Config reference.
* *Step 2:* Select the operation.
* *Step 3:* For the POJO no option is available by default.
* *Step 4:* Select the Reference or expression option and enter `#[flowVars[‘ref’]]`` as the value.
+
Example:
+
image::images/qa-guidelines-9.png[]

* *Step 5:*
Save and change to the Configuration XML view.

+
----
Expected Result: XML for the operation was generated using the ref attribute.
Example XML:
----
+
[source,xml]
----
<sfdc:batch-info config-ref="Salesforce" doc:name="Salesforce" >
<sfdc:batch-info ref="#[flowVars['batchInfoRef']]"/> </sfdc:batch-info>
----

* *Step 6:* Return to the Message Flow view, click the connector.
+
----
Expected Result:

Same operation is selected, Reference or expression is selected for the POJO and the value was stored.
----

* *Step 7:*
￼For the same POJO select the Define attributes option and enter `#[flowVars[‘pojoAttribute’]]` for the Id and Job Id values.
Example:
+
image::images/qa-guidelines-10.png[]

* *Step 8:* Save and change to the Configuration XML view.
+
[source,xml]
----
Expected Result:
XML for the operation was generated defining each of the POJO attributes.
Example XML:
<sfdc:batch-info config-ref="Salesforce" doc:name="Salesforce" >
<sfdc:batch-info id="#[flowVars['id']]" jobId="#[flowVars['jobId']]" state="Completed"/>
</sfdc:batch-info>
----

* *Step 9:*  Return to the Message Flow view, click the connector.
+
----
Expected Result:

Same operation is selected, Define attributes is selected for the POJO and the attributes values were stored.
----

==== XML Generation - Attribute Names Consistency
Operations attributes names should be the same as the ones from the API, but in case, this rule introduces inconsistencies among operations; then the parameter name should be corrected in the connector. As an example:

|===
|Library/API method| Expected result
|org.eclipse.egit.github.core. +
service.GistService.del eteGist(String gistId)| @Processor +
public void deleteGist(String gistId) throws IOException { +
... }
|org.eclipse.egit.github.core. +
service.GistService.get Gist(String id)| @Processor +
public Gist getGist(String gistId) throws IOException { +
... }
|===

==== XML Generation - Attribute Order
Order of operation attributes should be the same as in the API. Attributes generated in the wrong order cause errors in the XML at runtime.

==== XML generation - Required Attribute Value not Defined
===== Preconditions

* Applies to operations directly exposing fields (with no default value) on the Mule Properties View.
* In the Anypoint Studio canvas a connector building block was placed inside of a flow.
* Connector is selected.

===== Steps
* *Step 1:* On the General tab select the corresponding Config reference.

* *Step 2:* Select the operation.
+
----
Expected Result:
Operation required attributes values display as missing.
----
+
image::images/qa-guidelines-11.png[]

* *Step 3:* Look for the operation in the API docs.
+
----
Expected Result:
Required attributes match with the ones marked as such in the Mule Properties View.
----

* *Step 4:* Back in Anypoint Studio, change to the Problems tab.
+
----
Expected Result:
'Required attribute not defined' error is logged.
----
+
image::images/qa-guidelines-12.png[]

==== Message Sources
Methods annotated with @Source(). They are common for connectors to services with streaming APIs.

===== Preconditions

* Mule project was created and is open.
* Global Configuration element is already created with valid credentials to the service.
* Connector code is available to review configurations

===== Steps

* *Step 1:* Pull the desired connector to the canvas.
+
----
Expected Result:
Connector is created as endpoint to a flow.
----
+
image::images/qa-guidelines-13.png[]

* *Step 2:*
.. Place a *Logger* next to it.
.. Set Message Source received `#[message.payload]` as its Message.

* *Step 3:*
.. Set the Global Configuration Element to the connector.
.. Check the available operations.
+
----
Expected Result:
Operations on the dropdown match to methods marked as @Source on the connector code.
----

* *Step 4:*  Select the Message Source under test and configure it appropriately.
+
[source,xml]
----
Expected Result:

Example of a Mule flow:
<flow name="SubscribeToTopic" doc:name="SubscribeToTopic">
  <sfdc:subscribe-topic config-ref="Salesforce" topic="/ContactsDemo" doc:name="Subscribe To newAccountMessages Topic"/>
  <logger level="INFO" message="New account notification received: #[message.payload]" doc:name="Notification"/>
</flow>
----

* *Step 5:*
.. Run the Mule app.
.. Check the Console.

+
----
Expected Result:

Initialization message is logged:
INFO 2014-01-1317:59:17,210[HttpClient-29] org.mule.modules.salesforce.SalesforceBayeuxClient: subscribing /topic/ContactsDemo for the first time
----

* *Step 6:*
.. Trigger the event the Message Source is expecting.
.. Check the Console.

+
----
Expected Result:

Message Source response was logged.
----

=== DataMapper Compliance
DataMapper automatic metadata population is defined by the message processor attributes’ annotations as well as the message processor's return type.

In the case of POJO operation attributes, at least one of them must be marked as `@Optional`. `@Default("#[payload]")` causes data to be automatically picked up in DataMapper.

If custom fields can be defined for objects in the service domain, choose them for testing DataMapper compatibility.


==== DataMapper Compliance - Dynamics/Static Metadata - Perceptive Flow Design

===== Preconditions

* In the connector code @Connect contains metaData == MetaDataSwitch.OFF
* Flow contains a connector-datamapper-connector building block arrangement that is on the canvas.

===== Steps

* *Step 1:* Configure both connectors with the same operation.
+
----
Expected Result:
Metadata is fetched for both configurations.
----
* *Step 2:* Select the DataMapper building block.
* *Step 3:* Check the Input panel.
+
[source,java]
----
Expected Result:
 Mule automatically prescribes the output of the operation for any of the following return types:
* Map
* POJO
* List<Map>
* List<String>
* List<POJO>
* List<List<String>>

Check that values match the operation signature.
----

* *Step 4:* Check the Output panel.
+
[source,java]
----
Expected Result:
Mule automatically prescribes the input of the operation only for an attribute of the following type:
* Map
* POJO
* List<Map>
* List<String>
* List<POJO>
* List<List<String>>

Check that it's marked as `@Default("#[payload]")` (for connectors older than 3.5.0-M4). The correct annotations should be `@Optional @Default(“#[payload]”)`
----
* *Step 5:*  Check the operation attributes in the API docs.
+
----
Expected Result:
The attribute marked as `@Default("#[payload]")` (for connectors older than 3.5.0-M4). The correct annotations should be `@Optional @Default(“#[payload]”)` (aka PRIMARY argument) should be:
* An entity related to the service in case more than one applies.
* An entity that can't be created and is necessarily another operation return type (if applicable) .
----

==== DataMapper Compliance - Generate Mapping From the Return Type
===== Preconditions

* Flow contains a connector­datamapper building block arrangement that is on the canvas.

[cols="10,45,45"]
|===
|Steps|Description|Expected result

|1|Configure the connector with an operation returning POJO / List<POJO>, Map<String,POJO>, or List<Map<String, Object>>.|Metadata is fetched for both configurations.
|2|Select the DataMapper building block.|
|3|Check the Input panel.|Values are pre­populated.
|4|In the Output panel select Type XML.|
|5|Click on the User Defined radio button.|
|6|Click Generate default.|
|7|Generate mapping using default XML schema|Relationship is established.
|===

==== DataMapper Compliance - Generate Mapping to Operation Attribute
===== Preconditions

* Flow contains a datamapper­connector building block arrangement that is on the canvas.

[cols="10,45,45"]
|===
|Steps|Description|Expected result

|1|Configure the connector with an operation that has either a POJO / List<POJO>, Map<String,POJO>, or List<Map<String, Object>> as its main argument.|Metadata is fetched for both configurations.
|2|Select the DataMapper building block.|
|3|Check the Output panel.|Values were pre­populated.
|4|In the Input panel select Type XML.|
|5|Click on the User Defined radio button.|
|6|Click Generate default.|
|7|Generate mapping using default XML schema|Relationship is established.
|===

==== DataMapper Compliance - Override Metadata
===== Preconditions

* Flow contains a connector­datamapper­connector building block arrangement that is on the canvas.


[cols="10,45,45"]
|===
|Steps|Description|Expected result

|1|Configure both connectors with the same operation.|Metadata is fetched for both configurations.
|2|Select the DataMapper building block.|
|3|Check the Input and Output panel.|Values were pre­populated.
||The following steps are to be repeated for both the Output Panel and Input panel.|
|4|Override the provided metadata by clicking Change Type.|
|5|Select the connector from the Connector dropdown.|
|6|Make sure By Operation is selected and select the operation under test from the Operation dropdown.|
|7|Click the Object dropdown.|Operation return type is available in the dropdown.
|===

==== DataMapper Compliance - Dynamic Metadata - Custom Entities/Fields
This test case applies to connectors to services that support custom entities or custom fields in their entities.

===== Preconditions

* On the Global Configuration, DataSense is enabled and DataSense metadata types were fetched.
* Flow contains a connector­datamapper­connector building block arrangement that is on the canvas.
* Operation either consumes or returns an entity for which a custom entity or custom fields on an entity were defined on the service.

===== Steps

* *Step 1:* Configure both connectors with the same operation. For type, select the custom entity under test or the entity for which custom fields were defined on the sandbox.
For example:

+
image::images/qa-guidelines-14.png[]
+
----
Expected Result:
Metadata is fetched for both configurations.
----

* *Step 2:* Select the DataMapper building block.
+
----
Expected Result:
Values were pre­populated and relate to the entity under test.
----

* *The following step is to be run for either the Output Panel/Input panel.*

* *Step 3:* Generate a mapping (use a default map on the counter panel if necessary).
+
----
Expected Result:
Relationship is established.
DataMapper displays the custom entity or the custom fields of the entity under test.
----
+
image::images/qa-guidelines-15.png[]

==== DataMapper Compliance - No Metadata - Perceptive Flow Design
===== Preconditions

* In the connector code @Connect contains metaData == MetaDataSwitch.OFF
* Flow contains a connector­datamapper­connector building block arrangement that is on the canvas.


[cols="10,45,45"]
|===
|Steps|Description|Expected result

|1|Configure both connectors with the same operation.|Metadata is fetched for both configurations.
|2|Select the DataMapper building block.|
|3|Check the Input panel.|No values display.
|4|Check the Output panel.|No values display.
|===

=== DataSense Query Editor / DSQL
Connectors QA scope limits to check if feature reflects connector specific configuration values.
As example use the Dynamics connector (MessageProcessor expects XML thus everything is overridden).

==== DataSense Query Editor - OAuth Connector - Only NQL Query Option Available
===== Preconditions

* Flow contains a connector building block that is on the canvas and its Global Configuration element was selected as Config Reference.

* *Step 1:* Select corresponding operation for message processor with attribute marked @Query.

+
----
Expected Result:

* For attribute marked @Query only Native Query Language option in dropdown displays.
----
+
image::images/qa-guidelines-16.png[]

+
----
* Return type dropdown does not display.
----

==== DataSense Query Editor - Non-OAuth Connector - DSQL and NQL Query Options Available

===== Preconditions

* Flow contains a connector building block that is on the canvas and its Global Configuration element was selected as Config Reference.

* *Step 1:* Select corresponding operation for message processor with attribute marked @Query.

+
----
Expected Result:
* For attribute marked @Query *Native Query Language* and *DataSense Query Language* option in dropdown displays.
----
+
image::images/qa-guidelines-17.png[]

* *Step 2:* Click the Query Builder ...
+
----
Expected Result:
Query Builder opens.
----

==== DataSense Query Editor - Non-OAuth connector - Query by NQL
===== Preconditions

* Flow contains a connector building block that is on the canvas, and its config­element is already set.
* A DataMapper building block has been placed next to the connector building block.

[cols="10,45,45"]
|===
|Steps|Description|Expected result

|1|Select corresponding operation for message processor with attribute marked @Query.|For attribute marked @Query Native Query Language and DataSense Query Language options are displayed in the Language dropdown.
|2|Select NQL as Language.|Check that Return type dropdown displays.
|3|Make a Return type selection and then save.|
|4|Click the DataMapper element.|DataMapper is prepopulated according to Return type option selection (List<Return type>).
|===

==== DataSense Query Editor - Non-OAuth Connector - @Query Default Values
===== Preconditions

* Flow contains a connector building block that is on the canvas and its Global Configuration element was selected as Config Reference.
* No parameters are passed to the @Query annotation.

[cols="10,45,45"]
|===
|Steps|Description|Expected result

|1|Select corresponding operation for message processor with attribute marked @Query and click  *Query Builder*|Order By dropdown, Limit, and Offset fields are available.
|2|Build a query that applies two filters and makes use of the Order By, Limit, and Offset values.
Click *OK*.|Query Text is populated reflecting query values.
|===

==== DataSense Query Editor - Non-OAuth Connector - Query Builder Reflects @Query Configuration
===== Preconditions

* Flow contains a connector building block that is on the canvas and its Global Configuration element was selected as Config Reference.
* Parameters are passed to the @Query annotation.

[cols="10,45,45"]
|===
|Steps|Description|Expected result

|1|Select corresponding operation for message processor with attribute marked @Query and click  *Query Builder*|Order By dropdown, Limit, and Offset fields are available only if not passed as false to the annotation. Example: +
`@Query(limit == false, offset == false, orderBy == false)`
|2|Build a query that applies two filters. Click OK.|Query Text is populated. OR or AND operator is displayed between filters depending on configuration. Example:
`@Query(disabledOperators == QueryOperator.OR)`
|===

==== DataSense Query Editor - Non-OAuth connector - Query builder reflects service metadata configuration

*@MetaDataKeyRetriever* and *@MetaDataRetriever* annotated methods sets service specific configuration for Query Builder.
By default a Field "query configuration" (isWhereCapable, isSelectCapable, isOrderByCapable) are all true unless overridden by the service metadata.
Example:

[source,java]
----
// sObject isFromCapable (available in Types)
// public DefaultMetaDataKey(java.lang.String id, java.lang.String displayName, boolean isFromCapable);
new DefaultMetaDataKey(sobject.getName(), sobject.getLabel(), sobject.isQueryable())
// sObject attribute available in Fields and appears on the Filter dropdown depending on the service.
dynamicObject.addSimpleField(field.getName(), dataType).isWhereCapable(field.isFilterable());
// sObject attribute available in Fields and appears on the Order By dropdown depending on the service.
dynamicObject.addSimpleField(field.getName(), dataType).isOrderByCapable(f.isSortable());
----
===== Preconditions

* Flow contains a connector building block that is on the canvas and its Global Configuration element was selected as Config Reference.

===== Steps

* *Step 1:* Select corresponding operation for message processor with attribute marked @Query and click *Query Builder*
+
----
Expected Result:
Query Builder opens.
----

* *Step 2:* From service documentation derive equivalence classes such:

** Types not from­capable.
** Fields not filterable.
** Fields not sortable.
** Fields not selectable.
** ...

+
Select a representative value for each class.

+
----
Expected Result:
Object Builder reflects values.
----

==== DSQL - Non-OAuth Connector - Query Translation
Method annotated as @QueryTranslator contains logic to translate DSQL queries into NQL in case clauses or operators do not match those predefined by DSQL. +
Visitor classes (can be recognized by the extends DefaultQueryVisitor extends DefaultOperatorVisitor) that handle the mapping from a DSQL query into the service Native Query Language. +
SELECT, WHERE, OPERATORS and ORDERBY values can be overridden.

===== Preconditions

* Flow contains a connector building block that is on the canvas and its Global Configuration element was selected as Config Reference.

[cols="10,45,45"]
|===
|Steps|Description|Expected result

|1|Select corresponding operation for message processor with attribute marked @Query and click   *Query Builder*|Query Builder is displayed.
|2|Build queries using query builder that make use of clauses and operators whose values are been overridden by the connector.|Query Text is populated in DSQL format.
|3|Change from DSQL to NQL and check that the translation has been made correctly.|Clauses and operators and correctly translated.
|===

==== DSQL - Non-OAuth Connector - Query Equivalence
===== Preconditions

* Flow contains a connector building block that is on the canvas and its Global Configuration element was selected as Config Reference.

[cols="10,45,45"]
|===
|Steps|Description|Expected result

|1|Select corresponding operation for message processor with attribute marked @Query and click  *Query Builder*|Query Builder is displayed.
|2|Build a query using query builder that make use of clauses and operators whose values are been overridden by the connector.|Query Text is populated in DSQL format.
|3| Run the Mule application. Then Hit the endpoint to retrieve results.|Take note of the query results
|4|Stop the application.|
|5|Change from DSQL to NQL and check that the translation has been made correctly.
|Clauses and operators and correctly translated.
|6| Run the Mule application. Then Hit the endpoint to retrieve results.|Query results are the same than the ones on the DSQL query.
|===
