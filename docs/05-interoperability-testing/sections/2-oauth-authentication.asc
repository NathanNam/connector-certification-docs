[[oauth-authentication]]
=== OAuth Authentication
==== OAuth - Global Configuration Element

===== Preconditions
* Create and open a Mule Project using your connector.
* Make connector code available to review configurations.

===== Steps
* *Step 1:*
.. In Anypoint Studio, search for and place an *HTTP* connector on the canvas
.. Drop the desired connector inside the flow.
.. Select the connector and click the Connector Configuration green plus symbol Edit button.

+
----
Expected Result:

 * Connector class attributes marked as @Configurable display.
 * The consumerKey and consumerSecret are annotated with @OAuthConsumerKey and @OAuthConsumerSecret.
----

* *Step 2:* Enter valid access credentials and save.
+
----
Expected Result:
Create and save global configuration element.
----


==== OAuth - Project Arrangement and Configuration Verification

Build this test case to serve as the basis for the next set of test cases.

===== Preconditions

* Global element was already created for the connector and valid OAuth credentials (consumerKey, consumerSecret, and callback URL) have been entered.
* Make connector code available to review configurations.

===== Steps

* *Step 1:* Arrange a flow in the following way:
.. Place an *HTTP* connector on the canvas.
.. Place two consecutive connectors in the flow.
.. Place a *Logger* after the last connector.
.. Add a *Set Payload* element after the logger.

+
----
Expected Result:

Flow arrangement looks similar to this:
----

image::images/qa-guidelines-1.png[]


* *Step 2:* In the *HTTP* connector configuration, set the path value to *authorize*.
* *Step 3:*
.. Select the first connector.
.. Look for the Authorize operation.

+
----
Expected Result:
Authorize operation is found.
----

* *Step 4:*
.. Select the Authorize operation.
.. Check the General section.

+
----
Input fields are found for:
* State (only for OAuth2)
* Access Token URL
* Authorization URL
----


* *Step 5:* Look for the authorizationParameters inside the OAuth annotation.

+
----
Expected Result:
Each of the annotations on authorizationParameters are reflected in the Additional Authorization Parameters section. If none, the section is not displayed at all.
----

* *Step 6:* In case of OAuth2m set a state value of +testState+. Click *Save*

* *Step 7:* On the second connector, select any operation (besides Authorize and Unauthorize) and configure it. Click *Save*.

* *Step 8:* Set +Operation payload is #[message.payload]+ as the *Logger* message value. Then click *Save*.

* *Step 9:* Arrange a flow in the following way:
.. Place an *HTTP* connector on the canvas.
.. Drop a connector in the flow.
.. Drop a *Logger* after the last connector.
.. Finally, add a *Set Payload* element after the logger.

+
  Expected Result:
  Flow arrangement looks similar to this:
+
image::images/qa-guidelines-2.png[]

* *Step 10:* On the *HTTP* connector, set a path value of +anoperation+.

* *Step 11:* On the connector, select any operation (besides Authorize and Unauthorize) and configure it. Click *Save*.

* *Step 12:* Set +Operation payload is #[message.payload]+ as the *Logger* message value. Click *Save*.

* *Step 13:* Arrange a flow in the following way:
.. Place an *HTTP* connector on the canvas.
.. Drop a connector in the flow.
.. Drop a *Logger* after the last connector.
.. Finally, add a *Set Payload* element after the
logger.

+
  Expected Result:
  Flow arrangement looks similar to this:
+
image::images/qa-guidelines-3.png[]

* *Step 14:* On the connector, look for the Unauthorize operation.
+
  Expected Result:
  Unauthorize operation is found.

* *Step 15:* Select the Unauthorize operation. Click *Save*.

* *Step 16:* Set +Done.+ on all *Set Payload* elements Values. Click *Save*.
+
  Expected Result:
  Example of the project flows:

[source,xml]
----
<http:listener-config name="HTTP_Listener_Configuration" host="localhost" port="8081" doc:name="HTTP Listener Configuration"/>

<flow name="authorize" doc:name="authorize">

<http:listener config-ref="HTTP_Listener_Configuration" path="authorize" doc:name="HTTP"/>

    <sfdc:authorize config-ref="Salesforce__OAuth_" display="POPUP"
    doc:name="Authorize" />

    <!-- <sfdc:authorize config-ref="Salesforce__OAuth_" display="POPUP"
    doc:name="Authorize"/> -->

    <sfdc:get-user-info config-ref="Salesforce__OAuth_" doc:name="Get user info" >
    </sfdc:get-user-info>

    <logger message="#[message.payload]" level="INFO" doc:name="Logger"/>
    <set-payload value="Done." doc:name="Set Payload"/>
</flow>

<flow name="aConnectorOperation" doc:name="aConnectorOperation">

<http:listener config-ref="HTTP_Listener_Configuration" path="anoperation" doc:name="HTTP"/>
    <sfdc:describe-global config-ref="Salesforce__OAuth_" doc:name="Describe global"/>
    <logger message="#[message.payload]" level="INFO" doc:name="Logger"/>
    <set-payload value="Done." doc:name="Set Payload"/>
</flow>


<flow name="unauthorize" doc:name="unauthorize">

<http:listener config-ref="HTTP_Listener_Configuration" path="unauthorize" doc:name="HTTP"/>
    <sfdc:unauthorize config-ref="Salesforce__OAuth_" doc:name="Unauthorize"/>
    <set-payload value="Done." doc:name="Set Payload"/>
 </flow>
----

==== OAuth - Authorized Connector Requests
===== Preconditions

* Global element was already created for the connector and valid OAuth credentials (consumerKey, consumerSecret and callback URL) have been entered.
* OAuth 足 Project arrangement and configuration verifications test case was completed successfully
* Connector code is available to review configurations.

===== Steps

* *Step 1:*
.. Run the app and hit the authorize endpoint.
.. Complete the OAuth dance.

+
----
Expected Result:
* Redirects to the authorization URL of the service provider, which occurs according to authorizationParameters.
* Access is granted.
* Callback URL is shown in the browser address bar.
----

* *Step 2:*
Check the console.
+
----
Expected Result:
Operation payload is logged.

This implies that the logic contained in the @OAuthPostAuthorization to establish connections to make requests was executed.
Check the State parameter
----
* *Step 3:*
.. Hit the anoperation endpoint.
.. Check the console.
+
----
Expected Result:
Operation payload is logged.

This implies that Mule included the access token (contained within the parameters annotated with @OAuthAccessToken) in the request to the service provider.
----

* *Step 4:*
.. Hit the unauthorize endpoint.
.. Check the console.
+
----
Expected Result:
OAuth session is killed.
----

==== OAuth - Unauthorize Connector Requests
===== Preconditions
* Global element was already created for the connector and valid OAuth credentials (consumerKey, consumerSecret and callback URL) have been entered.
* OAuth 足Project arrangement and configuration verifications test case was completed successfully
* Connector code is available to review configurations.

===== Steps
* *Step 1:* Run the app and hit the anoperation endpoint.
+
----
Expected Result:
The consumer operation throws a NotAuthorizedException.
----
* *Step 2:*
.. Hit the authorize endpoint.
.. Complete the OAuth dance.
.. Check the console.

+
----
Expected Result:
Operation payload is logged.
----

* *Step 3:*
.. Hit the unauthorize endpoint.
.. Check the console.

+
----
Expected Result:
OAuth session is killed.
----

* *Step 4:*
.. Hit the anoperation endpoint.
.. Check the console.

+
----
Expected Result:
The consumer operation throws a NotAuthorizedException.
----

* *Step 5:*
.. Hit the unauthorize endpoint.
.. Check the console.

+
----
Expected Result:
Flow is run. No exception is thrown.
----

==== OAuth - Access Token Expiration
===== Preconditions
* Global element was already created for the connector and valid OAuth credentials (consumerKey, consumerSecret and callback URL) have been entered.
* OAuth 足 Project arrangement and configuration verifications test case completed successfully.
* Connector code is available to review configurations.
* Regular expression for the expirationRegex parameter was specified on the OAuth2 annotation.

===== Steps
* *Step 1:*
.. Hit the authorize endpoint.
.. Complete the OAuth dance.
.. Check the console.

+
----
Expected Result:
Operation payload is logged.
----

* *Step 2:* Meet access token expiration criteria.

* *Step 3:* Hit the anoperation endpoint.
+
----
Expected Result:
Expiration is detected and OAuth dance is triggered.
----

* *Step 4:*
.. Complete the OAuth dance.
.. Check the console.

+
----
Expected Result:
Operation payload is logged.
----

==== OAuth - Operation Not Supported Due to Scope Parameter
===== Preconditions
* Global element was already created for the connector and valid OAuth credentials (consumerKey, consumerSecret and callback URL) have been entered.
* OAuth 足 Project arrangement and configuration verifications test case was completed successfully.
* Connector code is available to review configurations.
* Connector declares a @OAuthScope attribute.

===== Steps

* *Step 1:* Open the Global Configuration element of the Connector and set a valid Scope value that's not supported by the operation on the authorize flow.
+
----
Expected Result:
Scope value is overridden.
----

* *Step 2:*
.. Run the app and hit the authorize endpoint.
.. Complete the OAuth dance.

+
----
Expected Result:
* Redirects to the authorization URL of the service provider that occurs according to authorizationParameters
* Access is granted.
* Callback URL is shown in the browser
address bar.
----

* *Step 3:* Check the console.

+
----
Expected Result:
No permission to access resource error displays.
----

* *Step 4:*
.. Hit the unauthorize endpoint.
.. Check the console.

+
----
Expected Result:
OAuth session is killed.
----
