[[_devkit_standars_best_practices]]
=== DevKit Standars and Best Practices

==== DataMapper Compliance
To have the best experience in Anypoint™ Studio, connectors must be DataMapper compliant. To achieve this, all operations must follow these recommendations.

Any argument, returned or received, must be one of the following data types:
. Map
. POJO
. List<Map>
. List<String>
. List<POJO>
. List<List<String>>

These types must be part of the method signature so that DataMapper can auto-recognize the types in it's mapping UI.

__Important__: Only use a map if you cannot use a POJO.
Only use a map if your data:
. Is schemaless, for example if created using MongoDB.
. Has user customizable schemas, if created with Salesforce.
. Has unknown content.


|===
|Good Example| Bad Example

|List<Map> query()| List<DBObject> query
|void send(Invoice invoice)| void send(Object object)
|Invoice getInvoice(String id)| Object get(String id, Class typeToCreate)

All operations must have a single object to take input from DataMapper. The object must be a single object, not multiple arguments. This object is called the Primary argument.
|===
|===
|Good Example| Bad Example

|void createInvoice(Invoice invoice)| createInvoice(Header header, List<LineItems> lineItems)
|void upsert(List<Map> sobjects, String type, String externalFieldId)| N/A - Multiple arguments are still needed!
|GetTaxResult getTax(TaxRequest request)|
```public GetTaxResult getTax(String companyCode, +
    AvalaraDocumentType docType, +
    @Optional String docCode, +
    Date docDate, +
    @Optional String salespersonCode, +
    String customerCode, +
    @Optional String customerUsageType, +
    String discount, +
    @Optional String purchaseOrderNo) +
```
|===

==== Annotations
If you have multiple arguments, annotate the Primary argument with:

`@Default("#[payload]")`

This way DataMapper knows which argument in the operation to use for mapping.

==== No Warning during compilation

DevKit does a intensive analysis of the used annotations and semantic of them in conjunction with others. It’s important the the code is free of compilation warning to help on the maintainability of the code and to follow good practices.

==== DevKit Generated API Doc

Connector documentation is composed of two different type of documentation: DevKit Generated DevKit API Doc and the Connector Documentation.

DevKit API Doc is automatically generated by DevKit based on the JavaDoc documentation at the connector class. This is one of the most important information used by the developer at the time of using the connector.

// @Todo: Hernan - What do you suggest ?. LDAP. We need to explain how to check the generated documentation.
// Recomendation with Samples

