[[_connector_demo_example]]
=== Connector Demo Example

// @Todo: Paulo - Here we need to complete with Justin's input feedback.


A Mule application's endpoints allow a user to interact with the service and API using the connector. Endpoints are committed to the GitHub repository along with source code. Use services or API use cases to determine which connector operations to select.

Guidelines to follow:

* All demo projects *must* be isolated in a folder with a descriptive name (It does not matter if is just only one demo). Eg: https://github.com/mulesoft/magento-connector/tree/develop/demo
* Use a meaningful name for the project. Avoid things such as "my-connector-demo" or "example-1". This name will be displayed in the ApiDoc site. Eg: http://mulesoft.github.io/salesforce-connector/
* The demo name *must* have middle lines to separate the words in it and must be in lower case. example: "mail-service-demo"
* Don't add prefix such as "mule" or "app". Just the purpose of it.
* Ensure that an app can be run by entering credentials without additional configuration or connector installation.
* Use placeholders for credentials.
* Ensure that flow names and message processors display names that make the use case easy to understand.
* Provide instructions on how to run the app in a README file (for example, https://github.com/mulesoft/s3-connector/tree/develop/demo/S3-connector-demo[S3]). It is recommended to add in a description of the demo application, such as what it aims to demonstrate and what each step of the demo is responsible for. Where application, you can also mention where your demo fits in a larger use case.
* Expose a set of endpoints that the user can access following the steps in the README to reproduce a use case.
* Consider implementing a CRUD (or similar) use case with chained processors whose payloads get logged into the Studio console (for example, https://github.com/mulesoft/s3-connector/tree/develop/demo/S3-connector-demo[S3]).
* Use DataMapper for Standard or Premium connectors' CRUD (or a similar) use case if API methods attributes and/or return types allow it.
* Consider basic error handling in the Mule app.

There are two kinds of demos that you can create:

* Single operation demos
* Workflow demos

Single operation demos are used to invoke just one operation in the connector. Workflow demos are used to invoke a number of operations in the connector sequentially. These aim to show a simple usecase of the connector, such as a normal CRUD workflow. We provide two templates to help you create an interface for your demo, one for each kind of demo. You can find the template for single operation demos link:files/single-operation-demo-template.html[here] and the template for the workflow demos link:files/workflow-demo-template.html[here].

The demo HTML pages above make use of Twitter Bootstrap to present a clean interface to the user. You should base your demo on this template. If you are not familiar with the Twitter Bootstrap library, it is highly suggested to look at http://getbootstrap.com/getting-started/[their documentation page]. Single operation demos only provide a form, whereas workflow demos provide an accordion, where one step leads to the next. In the latter case, any values retrieved by the first step should be used to autofill values in the second step where possible.

As an example, let us take a CRUD workflow for a number of Twitter API calls. The first step will create a tweet and return a number of values pertaining to the tweet that was created. One of these values would be the Tweet ID. The second step would be the "read" operation. The tweet ID should be automatically filled in the second step so that the user is simply able to submit a "read" API call without any needed input. The final step of the workflow should present an alert (or a notification of some sort), that the workflow has ended, outputting any relevant information from the last step. An example of this would be a "Tweet Deleted" message if the workflow was completed successfully, and the tweet that was created in the first step is successfully removed.

The following code snippets explain some parts of the above HTML page.
The demo contains 3 parts:

* The JavaScript that handles asynchronous calls to the demo running on a Mule instance.
* The CSS that renders the HTML page
* The HTML itself

**The JavaScript**

The JavaScript for this demo is simply used to send AJAX calls to a Mule server that hosts your demo application. In the case of workflow demos, it is also used to collapse the accordions as the user goes from one step to the next.

Initially, a reference to the <div> and <form> elements is obtained.

[source,javascript]
------
var createDiv   = $('#createDiv');
var readDiv     = $('#readDiv');
var updateDiv   = $('#updateDiv');
var deleteDiv   = $('#deleteDiv');

var createForm  = $('#createForm');
var readForm    = $('#readForm');
var updateForm  = $('#updateForm');
var deleteForm  = $('#deleteForm');
------

Then, each form is paired with a jQuery function sends an AJAX request whenever a form is submitted.

[source,javascript]
------
createForm.submit(function() {
  $.ajax({
    type: 'POST',                             // Submit an HTTP POST request
    url: '/create',                           // The URL where your endpoint is listening
    data: createForm.serialize(),             // Serialized form URL-encoded input
    success: function(data) {                 // Success function called if request succeeds

      $('input[name=message]').val(data.message); // Autofill data in the next workflow step as needed

      createDiv.collapse('hide');             // Hide current accordion window
      readDiv.collapse('show');               // Show next accordion window
    },
    error: function(request, status, error){  // Error function is executed if an exception occurs in the flow
      alert(request.responseText);            // Alert the user of any errors
    }
  });

  return false;                               // Let jQuery handle the form submission
});
------

In the case of a workflow demo, every form will represent a step in the workflow. The above code snippet should be repeated for every form you have in your workflow, applying changes as needed.

**The CSS**

The HTML page linked above comes with a number of CSS presets that you can use throughout your demo. A number of Bootstrap CSS classes are also used to build the accordion and the panels within it. For more information on how to build your own accordion, or even extend the one in the HTML template, please refer to the http://getbootstrap.com/javascript/#collapse-example-accordion[Bootstrap Accordion documentation page].

**The HTML**

This part is what ties everything together. The HTML represents what your users will see when they open your demo to use your connector. Take this HTML snippet as an example:

[source,html,options="nowrap"]
-------
<div class="panel-group" id="accordion">
    <div class="panel panel-default">
        <div class="panel-heading">
            <h2 class="panel-title demo-heading">
                <a data-toggle="collapse" data-parent="#accordion" href="#createDiv">Create</a>
            </h2>
        </div>
        <div id="createDiv" class="panel-collapse collapse in">
            <div class="panel-body">
                <form id="createForm" class="demo-form" role="form" >
                    <label>Message</label>
                    <input type="text" name="message" value="Hello from Mule!" required class="form-control" ><br>
                    <input class="btn btn-lg btn-primary btn-block" type="submit" value="Create"><br>
                </form>
            </div>
        </div>
    </div>
    ...
</div>
-------

The above snippet of HTML is taken from the workflow demo template, it represents a single panel in the accordion. This panel is split into two parts: the header and the content. The header refers to the content through the anchor tag (<a>). When this header is clicked, the content is shown. On the other hand, the content is composed of a simple form that is used to submit requests to Mule. These requests are handled by the JavaScript shown above.

For a complete example of a workflow demo, you can download a sample project that uses MongoDB link:files/workflow-operations-demo.zip[here].
